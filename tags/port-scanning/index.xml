<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Port Scanning on Technical Notes</title>
    <link>https://tzyluen.github.io/tags/port-scanning/index.xml</link>
    <description>Recent content in Port Scanning on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015. All rights reserved.</copyright>
    <atom:link href="https://tzyluen.github.io/tags/port-scanning/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Scan a network for vulnerabilities with Nessus</title>
      <link>https://tzyluen.github.io/post/scan-a-network-for-vulnerabilities-with-nessus/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scan-a-network-for-vulnerabilities-with-nessus/</guid>
      <description>

&lt;h1 id=&#34;scan-a-network&#34;&gt;Scan a network&lt;/h1&gt;

&lt;p&gt;Target: 192.168.1.0/24&lt;/p&gt;

&lt;p&gt;Nessus provides a set of ready-to-use templates. For general scans, the &lt;strong&gt;(1) Advanced Scan&lt;/strong&gt; and &lt;strong&gt;(2) Basic Network Scan would work&lt;/strong&gt;. The differences are the Advanced Scan supports the &lt;em&gt;Compliance&lt;/em&gt; and &lt;em&gt;Plugins&lt;/em&gt; which can be used to fine-tune the compliance checks (credentials are required) and Plugins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-01.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-01&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;advanced-scans&#34;&gt;Advanced Scans&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigates to &lt;code&gt;Scans&lt;/code&gt; &amp;rarr; &lt;code&gt;New Scan&lt;/code&gt; &amp;rarr; &lt;code&gt;Advanced Scan&lt;/code&gt;, insert the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;targets&lt;/code&gt;. The &lt;code&gt;Schedule&lt;/code&gt; and &lt;code&gt;Notifications&lt;/code&gt; options enable the scan to be performed at certain time and email the results to a list of recipients automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-02.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tune the rest of the settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-03.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-03&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once all is set, save. The scan job will be listed in &lt;code&gt;My Scans&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;basic-network-scans&#34;&gt;Basic Network Scans&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigates to &lt;code&gt;Scans&lt;/code&gt; &amp;rarr; &lt;code&gt;New Scan&lt;/code&gt; &amp;rarr; &lt;code&gt;Basic Network Scan&lt;/code&gt;, insert the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;targets&lt;/code&gt;, then save.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-04.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-04&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;launch-a-scan&#34;&gt;Launch A Scan&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;From the &lt;code&gt;My Scans&lt;/code&gt; folder, select a task from the list to launch the scan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-05.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once the scan complete, the status bar will changed to checked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-06.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-06&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;results&#34;&gt;Results&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The scan results are grouped by host, and vulnerabilities (color-coded by severity).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To prepare both summary and technical reports to circulate among teams, use the Export &amp;rarr; PDF (or HTML, CSV, Nessus, Nessus DB)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clicking the vulnerabilities bar will drill-down to the next-level of 192.168.1.1 vulnerabilities:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-07.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-07&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The next level of drill-down will display the list of vulnerabilities exposed by Nessus on target 192.168.1.1, and clicking the specific vulnerability will drill-down to the attack vectors info:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-10.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-10&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The description of the vulnerability, the recommended solution, and the payload used during the scan are documented:&lt;/p&gt;

&lt;p&gt;i. Description of the vulnerability and the attack vector.&lt;/p&gt;

&lt;p&gt;ii. The recommended solution.&lt;/p&gt;

&lt;p&gt;iii. The attack code/payload during the scan.&lt;/p&gt;

&lt;p&gt;iv. Network port used for this attack.&lt;/p&gt;

&lt;p&gt;v. A summarize of the risk factor information.&lt;/p&gt;

&lt;p&gt;vi. Vulnerability information on known exploit availability and publication date.&lt;/p&gt;

&lt;p&gt;vii. Reference information from the CVE (Common Vulnerabilities and Exposures) network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-11.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-11&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;exports&#34;&gt;Exports&lt;/h2&gt;

&lt;h3 id=&#34;executive-report&#34;&gt;Executive Report&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To generate an executive report, choose:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-08.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-08&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;technical-report&#34;&gt;Technical Report&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To generate a technical report, choose &lt;code&gt;Custom&lt;/code&gt;, select &lt;code&gt;Vulnerabilities&lt;/code&gt; to include the data, and group by &lt;code&gt;Host&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-a-network-for-vulnerability-with-nessus-09.png&#34; alt=&#34;scan-a-network-for-vulnerability-with-nessus-09&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://www.tenable.com/products/nessus-vulnerability-scanner&#34;&gt;https://www.tenable.com/products/nessus-vulnerability-scanner&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scan the Internet with Masscan</title>
      <link>https://tzyluen.github.io/post/scan-the-internet-with-masscan/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scan-the-internet-with-masscan/</guid>
      <description>

&lt;p&gt;Base system used to perform the scans:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@192.168.1.11:~# uname -a
Linux kali 4.9.0-kali3-amd64 #1 SMP Debian 4.9.13-1kali2 (2017-03-07) x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;scan-large-ip-block&#34;&gt;Scan large IP block&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Scan the entire 175.0.0.0/8 for port 22, 80, 445&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-00.png&#34; alt=&#34;scan-the-internet-with-masscan-00&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It&amp;rsquo;s risky to perform such as scan as it may trigger some IDS/IPS and get your IP blocked/blacklisted from accessing them permanently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scan a Yahoo IP block for port tcp/80:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Trace the Yahoo&amp;rsquo;s IP block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@192.168.1.11:~# mtr -y1 yahoo.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-01.png&#34; alt=&#34;scan-the-internet-with-masscan-01&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scan the entire IP block (32768 of hosts):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-02.png&#34; alt=&#34;scan-the-internet-with-masscan-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;exclude-ip-blocks-of-sensitive-part-of-the-internet&#34;&gt;Exclude IP blocks of sensitive part of the Internet:&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure the &lt;code&gt;excludefile&lt;/code&gt; is defined in &lt;code&gt;/etc/masscan/masscan.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;excludefile=/etc/masscan/exclude.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Append the following into the exclude list to prevent scanning them by accident:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-03.png&#34; alt=&#34;scan-the-internet-with-masscan-03&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, for a non-persistent exclude list, use &lt;code&gt;--excludefile&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan 175.0.0.0/8 -p80 --rate 10000 --excludefile exclude.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;include-ip-blocks-for-targeted-ip-blocks&#34;&gt;Include IP blocks for targeted IP blocks:&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Similar to &lt;code&gt;excludefile&lt;/code&gt;, the file format for the include list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Include list:
# For targeting organizations or verticals with multiple blocks
75.0.0.0/8               # AT&amp;amp; Internet Services
175.145.0.0/16           # TMNet
    
# Private IPv4 addresses, to scan entire organization network
192.168.0.0/16           # class C
172.16.0.0/12            # class B
10.0.0.0/8               # class A
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scan with the include file option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan -p80 --includefile include.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;transmission-rates&#34;&gt;Transmission Rates&lt;/h1&gt;

&lt;p&gt;Depends on network infrastructure and NIC, it can be scaled up to 25 million packets/second.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The default transmit rate is 100 packets/second. Takes approx. 6 minutes to scan 32768 hosts on port tcp/80:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan 98.139.128.0/17 -p80 --rate 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-04.png&#34; alt=&#34;scan-the-internet-with-masscan-04&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;With 10,000 packets/second takes approx. 8 seconds to scan 32768 hosts on port tcp/80:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan 98.139.128.0/17 -p80 --rate 10000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-05.png&#34; alt=&#34;scan-the-internet-with-masscan-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Known max. transmission rates are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Windows - 250,000 packets/second&lt;/li&gt;
&lt;li&gt;Linux - 2,500,000 packets/second&lt;/li&gt;
&lt;li&gt;PF_RING driver - 25,000,000 packets/second&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;specify-ports-and-ranges&#34;&gt;Specify ports and ranges&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan 175.145.0.0/16 -p22,80,445 --rate 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-06.png&#34; alt=&#34;scan-the-internet-with-masscan-06&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;banners&#34;&gt;Banners&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Grab the banners, i.e., HTTP server version, title, and etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan 175.145.0.0/16 -p22,80,445 --rate 10000 --banners
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Some interesting information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-08.png&#34; alt=&#34;scan-the-internet-with-masscan-08&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;output-formats&#34;&gt;Output formats&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sets the output format to binary &lt;code&gt;-oB&lt;/code&gt; and saves the output in the given filename, which can be read with &lt;code&gt;--readscan&lt;/code&gt;, and optionally output into a new format later:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-oB: binary
-oL: list
-oG: grepable
-oX: xml

masscan 175.145.0.0/16 -p22,80,445 --banners --rate 10000 -oB 175-145-0-0-masscan.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-masscan-07.png&#34; alt=&#34;scan-the-internet-with-masscan-07&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read the saved binary file into new &lt;code&gt;xml&lt;/code&gt; format file that can be used for parsing and reporting:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan 175.145.0.0/16 --readscan 175-145-0-0-masscan.bin -oX 175-145-0-0-masscan.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;save-amp-manage-the-conf-for-different-scanning-strategies-amp-objectives&#34;&gt;Save &amp;amp; manage the conf for different scanning strategies &amp;amp; objectives&lt;/h1&gt;

&lt;p&gt;Save the configuration into a file. Multiple conf files for different objectives and strategies. For example, a configuration file for a particular ip block, i.e.,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Save the current settings into a conf file (&lt;code&gt;--echo&lt;/code&gt; and redirect to &lt;code&gt;175-145-0-0.conf&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan 175.145.0.0/16 -p22,80,445 --banners --rate 10000 --echo &amp;gt; 175-145-0-0.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use the saved profile for the same objective:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;masscan -c 175-145-0-0.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Port-knocking</title>
      <link>https://tzyluen.github.io/post/port-knocking/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/port-knocking/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Port-knocking is a stealth method to open ports that the firewall keeps closed by default. A port-knock server listens to all traffic on an ethernet (or PPP) interface, looking for a special &amp;ldquo;knock&amp;rdquo; sequences of port-hits.&lt;/p&gt;

&lt;p&gt;A client system makes these port-hits by sending a TCP (or UDP) packet to a port on the server. When the server detects a specific sequence of port-hits, it runs a command defined in its configuration file. This can be used to open up holes in a firewall for quick access. The primary benefit is that it suppresses the regular port scan and appears as not availale.&lt;/p&gt;

&lt;p&gt;Essentially, the port-knocking strategy is security by obscurity.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;enabling-knockd&#34;&gt;Enabling knockd&lt;/h1&gt;

&lt;p&gt;A prerequisite to enable port-knocking is &lt;code&gt;iptables&lt;/code&gt;. The &lt;code&gt;knockd&lt;/code&gt; is a small port-knock daemon that implements the port-knock server, dynamically manipulate the firewall rules to open and close ports.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ sudo apt-get install knockd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the default configuration, enable the service at init and set the target network interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ sudo vim /etc/default/knockd
...
START_KNOCKD=1
KNOCKD_OPTS=&amp;quot;-i enp0s3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the desired port-knocking sequence &lt;code&gt;1300&lt;/code&gt;, &lt;code&gt;8888&lt;/code&gt;, &lt;code&gt;9394&lt;/code&gt; in &lt;code&gt;/etc/knockd.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[options]
        #UseSyslog
        logfile     = /var/log/knockd.log

[openSSH]
        #sequence    = 1300:tcp,8888:udp,9394:tcp
        sequence    = 1300,8888,9394
        seq_timeout = 10
        command     = /sbin/iptables -A INPUT -s %IP% -p tcp --dport 22 -j ACCEPT
        tcpflags    = syn

[closeSSH]
        sequence    = 9394,8888,1300
        seq_timeout = 10
        command     = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 22 -j ACCEPT
        tcpflags    = syn
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ sudo systemctl start knockd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;port-knocking&#34;&gt;Port-knocking&lt;/h1&gt;

&lt;h2 id=&#34;using-knock&#34;&gt;Using Knock&lt;/h2&gt;

&lt;p&gt;The utility from the &lt;code&gt;knockd&lt;/code&gt; package.&lt;/p&gt;

&lt;h3 id=&#34;open-the-port&#34;&gt;Open the port&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.11:~$ knock -v 192.168.1.9 1300 8888 9394
hitting tcp 192.168.1.9:1300
hitting tcp 192.168.1.9:8888
hitting tcp 192.168.1.9:9394
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; it&amp;rsquo;s possible to combine TCP and UDP port:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.11:~$ knock -v 192.168.1.9 1300:tcp 8888:udp 9394:tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;close-the-port&#34;&gt;Close the port&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.11:~$ knock -v 192.168.1.9 9394 8888 1300
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-hping3-nmap&#34;&gt;Using Hping3 / Nmap&lt;/h2&gt;

&lt;p&gt;The following comes handy for any remote system to makes port-hits without install the &lt;code&gt;knockd&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-S: set SYN tcp flag
-p: port
-c: count, stop after sending (and receiving) count response packets
hping3 -S -p $ARG -c 1 $HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple shell script &lt;code&gt;port-knocking.sh&lt;/code&gt; to knocks target host &lt;code&gt;$HOST&lt;/code&gt; of &lt;code&gt;$@&lt;/code&gt; (list of sequences) iteratively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
HOST=$1
shift
for ARG in &amp;quot;$@&amp;quot;
do
    hping3 -S -p $ARG -c 1 $HOST
    #nmap -Pn --host-timeout 100 --max-retries 0 -p $ARG $HOST
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;open-the-port-1&#34;&gt;Open the port&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Initial state - 192.168.1.9 port 22/tcp closed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-01.png&#34; alt=&#34;port-knocking-01&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Connection timed out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-02.png&#34; alt=&#34;port-knocking-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Knocks and opens 192.168.1.9:22 with SYN tcpflag and port 1300, 8888, 9394 sequence:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-03.png&#34; alt=&#34;port-knocking-03&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connects to the host:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-05.png&#34; alt=&#34;port-knocking-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;/var/log/knockd.log&lt;/code&gt; entries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
[2016-09-03 18:20] 192.168.1.11: openSSH: Stage 1
[2016-09-03 18:20] 192.168.1.11: openSSH: Stage 2
[2016-09-03 18:20] 192.168.1.11: openSSH: Stage 3
[2016-09-03 18:20] 192.168.1.11: openSSH: OPEN SESAME
[2016-09-03 18:20] openSSH: running command: /sbin/iptables -A INPUT -s 192.168.1.11 -p tcp --dport 22 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;close-the-port-1&#34;&gt;Close the port&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Runs the &lt;code&gt;port-knocking.sh&lt;/code&gt; script and pass the close port sequence 9394, 8888, 1300:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-04.png&#34; alt=&#34;port-knocking-04&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;/var/log/knockd.log&lt;/code&gt; entries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
[2016-09-03 19:37] 192.168.1.11: closeSSH: Stage 1
[2016-09-03 19:37] 192.168.1.11: closeSSH: Stage 2
[2016-09-03 19:37] 192.168.1.11: closeSSH: Stage 3
[2016-09-03 19:37] 192.168.1.11: closeSSH: OPEN SESAME
[2016-09-03 19:37] closeSSH: running command: /sbin/iptables -D INPUT -s 192.168.1.11 -p tcp --dport 22 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;alternative&#34;&gt;Alternative&lt;/h1&gt;

&lt;p&gt;There are a lot of existing implementations available to support various platforms [1].
For instance, a more advanced &lt;code&gt;fwknop&lt;/code&gt; [2] which implements an authorization scheme known as Single Packet Authorization (SPA) for strong service concealment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://www.portknocking.org/view/implementations&#34;&gt;http://www.portknocking.org/view/implementations&lt;/a&gt; &lt;br&gt;
[2] &lt;a href=&#34;https://github.com/mrash/fwknop&#34;&gt;https://github.com/mrash/fwknop&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nmap top 1000 ports</title>
      <link>https://tzyluen.github.io/post/nmap-top-1000-ports/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/nmap-top-1000-ports/</guid>
      <description>&lt;p&gt;In the &lt;em&gt;Nmap Network Scanning&lt;/em&gt; book, chapter 15, section &lt;em&gt;Port Specification and Scan Order&lt;/em&gt;, quote &amp;ldquo;By default, Nmap scans the most common 1,000 ports for each protocol.&amp;rdquo; [1]&lt;/p&gt;

&lt;p&gt;However, the documentation did not mention the list of 1000 ports.&lt;/p&gt;

&lt;p&gt;How to identify and show those ports ?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--top-ports n: the n highest-ratio ports found in nmap-services. n must be 1 or greater
-v: verbose level, to print the 
-oG: grepable output
- : output to stdout
nmap --top-ports 1000 -v -oG - localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; refer to &lt;code&gt;/usr/share/nmap/nmap-services&lt;/code&gt; file for the service name and protocol.&lt;/p&gt;

&lt;p&gt;So put all together, and process the output in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nmap --top-ports 1000 localhost -v -oG - | grep &#39;Ports scanned&#39; | cut -d&amp;quot; &amp;quot; -f4 | tr &#39;,;&#39; &#39;\n&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;TCP(1000
1
3-4
6-7
9
13
17
19-26
30
32-33
37
42-43
49
53
70
79-85
88-90
99-100
106
109-111
113
119
125
135
139
143-144
146
161
163
179
199
211-212
222
254-256
259
264
280
301
306
311
340
366
389
406-407
416-417
425
427
443-445
458
464-465
481
497
500
512-515
524
541
543-545
548
554-555
563
587
593
616-617
625
631
636
646
648
666-668
683
687
691
700
705
711
714
720
722
726
749
765
777
783
787
800-801
808
843
873
880
888
898
900-903
911-912
981
987
990
992-993
995
999-1002
1007
1009-1011
1021-1100
1102
1104-1108
1110-1114
1117
1119
1121-1124
1126
1130-1132
1137-1138
1141
1145
1147-1149
1151-1152
1154
1163-1166
1169
1174-1175
1183
1185-1187
1192
1198-1199
1201
1213
1216-1218
1233-1234
1236
1244
1247-1248
1259
1271-1272
1277
1287
1296
1300-1301
1309-1311
1322
1328
1334
1352
1417
1433-1434
1443
1455
1461
1494
1500-1501
1503
1521
1524
1533
1556
1580
1583
1594
1600
1641
1658
1666
1687-1688
1700
1717-1721
1723
1755
1761
1782-1783
1801
1805
1812
1839-1840
1862-1864
1875
1900
1914
1935
1947
1971-1972
1974
1984
1998-2010
2013
2020-2022
2030
2033-2035
2038
2040-2043
2045-2049
2065
2068
2099-2100
2103
2105-2107
2111
2119
2121
2126
2135
2144
2160-2161
2170
2179
2190-2191
2196
2200
2222
2251
2260
2288
2301
2323
2366
2381-2383
2393-2394
2399
2401
2492
2500
2522
2525
2557
2601-2602
2604-2605
2607-2608
2638
2701-2702
2710
2717-2718
2725
2800
2809
2811
2869
2875
2909-2910
2920
2967-2968
2998
3000-3001
3003
3005-3007
3011
3013
3017
3030-3031
3052
3071
3077
3128
3168
3211
3221
3260-3261
3268-3269
3283
3300-3301
3306
3322-3325
3333
3351
3367
3369-3372
3389-3390
3404
3476
3493
3517
3527
3546
3551
3580
3659
3689-3690
3703
3737
3766
3784
3800-3801
3809
3814
3826-3828
3851
3869
3871
3878
3880
3889
3905
3914
3918
3920
3945
3971
3986
3995
3998
4000-4006
4045
4111
4125-4126
4129
4224
4242
4279
4321
4343
4443-4446
4449
4550
4567
4662
4848
4899-4900
4998
5000-5004
5009
5030
5033
5050-5051
5054
5060-5061
5080
5087
5100-5102
5120
5190
5200
5214
5221-5222
5225-5226
5269
5280
5298
5357
5405
5414
5431-5432
5440
5500
5510
5544
5550
5555
5560
5566
5631
5633
5666
5678-5679
5718
5730
5800-5802
5810-5811
5815
5822
5825
5850
5859
5862
5877
5900-5904
5906-5907
5910-5911
5915
5922
5925
5950
5952
5959-5963
5987-5989
5998-6007
6009
6025
6059
6100-6101
6106
6112
6123
6129
6156
6346
6389
6502
6510
6543
6547
6565-6567
6580
6646
6666-6669
6689
6692
6699
6779
6788-6789
6792
6839
6881
6901
6969
7000-7002
7004
7007
7019
7025
7070
7100
7103
7106
7200-7201
7402
7435
7443
7496
7512
7625
7627
7676
7741
7777-7778
7800
7911
7920-7921
7937-7938
7999-8002
8007-8011
8021-8022
8031
8042
8045
8080-8090
8093
8099-8100
8180-8181
8192-8194
8200
8222
8254
8290-8292
8300
8333
8383
8400
8402
8443
8500
8600
8649
8651-8652
8654
8701
8800
8873
8888
8899
8994
9000-9003
9009-9011
9040
9050
9071
9080-9081
9090-9091
9099-9103
9110-9111
9200
9207
9220
9290
9415
9418
9485
9500
9502-9503
9535
9575
9593-9595
9618
9666
9876-9878
9898
9900
9917
9929
9943-9944
9968
9998-10004
10009-10010
10012
10024-10025
10082
10180
10215
10243
10566
10616-10617
10621
10626
10628-10629
10778
11110-11111
11967
12000
12174
12265
12345
13456
13722
13782-13783
14000
14238
14441-14442
15000
15002-15004
15660
15742
16000-16001
16012
16016
16018
16080
16113
16992-16993
17877
17988
18040
18101
18988
19101
19283
19315
19350
19780
19801
19842
20000
20005
20031
20221-20222
20828
21571
22939
23502
24444
24800
25734-25735
26214
27000
27352-27353
27355-27356
27715
28201
30000
30718
30951
31038
31337
32768-32785
33354
33899
34571-34573
35500
38292
40193
40911
41511
42510
44176
44442-44443
44501
45100
48080
49152-49161
49163
49165
49167
49175-49176
49400
49999-50003
50006
50300
50389
50500
50636
50800
51103
51493
52673
52822
52848
52869
54045
54328
55055-55056
55555
55600
56737-56738
57294
57797
58080
60020
60443
61532
61900
62078
63331
64623
64680
65000
65129
65389)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://nmap.org/book/man-port-specification.html&#34;&gt;https://nmap.org/book/man-port-specification.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automate port scanning with Nmap &amp; Ndiff</title>
      <link>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</guid>
      <description>

&lt;h1 id=&#34;nmap-ndiff&#34;&gt;Nmap Ndiff&lt;/h1&gt;

&lt;p&gt;Ndiff is a tool to aid in the comparison of Nmap scans. Ndiff, like the standard diff utility, compares two scans at a time. It takes two Nmap XML output files and prints the differences between them. The differences observed are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Host states (e.g. up to down)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Port states (e.g. open to closed)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Service versions (from -sV)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OS matches (from -O)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Script output&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;scan-and-interpret-the-results-diffs&#34;&gt;Scan and interpret the results/diffs&lt;/h2&gt;

&lt;p&gt;Do a fast scan &lt;code&gt;-F&lt;/code&gt;, and output result in XML format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -F -sS -sV -oX 192-168-1-10-$(date +%F-%R) 192.168.1.10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do a full TCP port scan, service/version detection and output result in XML format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -p 1-65535 -sS -sV -oX 192-168-1-10-$(date +%F-%R) 192.168.1.10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare the two results with &lt;code&gt;ndiff&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v, --verbose
   Include all hosts and ports in the output, not only those that have changed.
ndiff -v file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full TCP port scan (&lt;code&gt;-p 1-65535&lt;/code&gt;) exposed 3 additional ports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scanning-a-network-on-a-schedule-with-nmap-ndiff-01.png&#34; alt=&#34;scanning-a-network-on-a-schedule-with-nmap-ndiff-01&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;

&lt;p&gt;Put the regular &lt;code&gt;nmap&lt;/code&gt; scan into a script and &lt;code&gt;ndiff&lt;/code&gt; its XML format results, and &lt;code&gt;mailto&lt;/code&gt; the target recipient(s):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script:&lt;/strong&gt; &lt;code&gt;001-LAN-192-168-1-daily.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
BASENAME=&amp;quot;001-LAN-192-168-1-daily-scan&amp;quot;
TARGETS=&amp;quot;192.168.1.1/24&amp;quot;
OPTIONS=&amp;quot;-v --top-ports 1000 -T4 -sV&amp;quot;
date=`date +%F`
cd /home/tzy/scans
nmap $OPTIONS $TARGETS -oA $BASENAME-$date &amp;gt; /dev/null
if [ -e $BASENAME-prev.xml ]; then
       ndiff $BASENAME-prev.xml $BASENAME-$date.xml &amp;gt; $BASENAME-diff-$date
       echo &amp;quot;*** NDIFF RESULTS ***&amp;quot;
       cat $BASENAME-diff-$date
       echo
fi
echo &amp;quot;*** NMAP RESULTS ***&amp;quot;
cat $BASENAME-$date.nmap
ln -sf $BASENAME-$date.xml $BASENAME-prev.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; weekly scan can be extended to full TCP scan such as: &lt;code&gt;-v -p 1-65535 -T4 -sV&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crontab:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAILTO=tzy
0 0 * * 1-6 /root/cron/001-LAN-192-168-1-daily.sh    # daily at 00:00AM, Mon-Sat 
0 0 * * sun /root/cron/001-LAN-192-168-1-weekly.sh   # weekly at 00:00AM, Sun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it can be easily extended to include weekly, monthly, policy-based scans with carefully crafted scanning strategy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scan the Internet with Nmap</title>
      <link>https://tzyluen.github.io/post/scan-the-internet-with-nmap/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scan-the-internet-with-nmap/</guid>
      <description>

&lt;h1 id=&#34;scan-a-network-subnet&#34;&gt;Scan A Network/Subnet&lt;/h1&gt;

&lt;h2 id=&#34;host-discovery&#34;&gt;Host Discovery&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HOST DISCOVERY:
-sL: List Scan - simply list targets to scan, without sending any packets to the target hosts,
                 useful to generate list of target hosts and dns resolution.
-sn: Ping Scan - disable port scan.
-Pn: Treat all hosts as online -- skip host discovery.
-PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports.
-PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes.
-n/-R: Never do DNS resolution/Always resolve.

nmap -sn 192.168.1.1/24                                     # ping scan
nmap -sn -PS22-25,80,113,1050,8080,35000 192.168.1.1/24     # custom TCP SYN scan
nmap -sn -PU82,9001,9030,9050-9051 192.168.1.1/24           # custom UDP scan
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scan-a-large-public-network&#34;&gt;Scan a large public network&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Identify the IP block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mtr -brw -y1 target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-01.png&#34; alt=&#34;scan-the-internet-with-nmap-01&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do a ping scan only (&lt;code&gt;-sn&lt;/code&gt;) and write three output formats/results (&lt;code&gt;-oA&lt;/code&gt;) to three files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -v -sn target -oA output
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Ping Scan for 4096 hosts completed in 191.33s.&lt;/li&gt;
&lt;li&gt;DNS resolution takes approx. additional 1158.11s.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-02.png&#34; alt=&#34;scan-the-internet-with-nmap-02&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-03.png&#34; alt=&#34;scan-the-internet-with-nmap-03&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the DNS resolution phase prolonged the total time (&lt;code&gt;-n&lt;/code&gt; to disable DNS resolution):&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ping scan without DNS resolution (&lt;code&gt;-n&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -v -sn -n target -oA output
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Ping Scan without DNS resolution completed in 146.49s.&lt;/li&gt;
&lt;li&gt;Total time is 147.67s, approx 10x of speedup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-04.png&#34; alt=&#34;scan-the-internet-with-nmap-04&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-05.png&#34; alt=&#34;scan-the-internet-with-nmap-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;scan-a-private-network-192-168-1-0-24&#34;&gt;Scan a private network: 192.168.1.0/24&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do a TCP SYN scan (&lt;code&gt;-sS&lt;/code&gt;) with OS detection (&lt;code&gt;-O&lt;/code&gt;) and output results in three major formats (&lt;code&gt;-oA&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v: increase verbosity level
-sS: TCP SYN scan
-O: enable OS detection
-n: do not do DNS resolution
-oA: output in the three major formats (nmap, gnmap, xml) at once 
nmap -v -sS -O -n target -oA output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-06.png&#34; alt=&#34;scan-the-internet-with-nmap-06&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-07.png&#34; alt=&#34;scan-the-internet-with-nmap-07&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-08.png&#34; alt=&#34;scan-the-internet-with-nmap-08&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Completed TCP SYN scan (&lt;code&gt;-sS&lt;/code&gt;) on 192.168.1.0/24 in approx. 1.94s.&lt;/li&gt;
&lt;li&gt;The default most commong 1000 ports [1], plus OS detection for 4 hosts took approx. 12.76s.&lt;/li&gt;
&lt;li&gt;Total time is 14.70s.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;scan-a-single-target&#34;&gt;Scan A Single Target&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SCAN TECHNIQUES:
 -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
 -sU: UDP Scan
 -sN/sF/sX: TCP Null, FIN, and Xmas scans
 --scanflags &amp;lt;flags&amp;gt;: Customize TCP scan flags
 -sI &amp;lt;zombie host[:probeport]&amp;gt;: Idle scan
 -sY/sZ: SCTP INIT/COOKIE-ECHO scans
 -sO: IP protocol scan
 -b &amp;lt;FTP relay host&amp;gt;: FTP bounce scan
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-A: Aggressive scan options, equivalent to -O, -sV, -sC, --traceroute.
    OS and version detection, script scanning, and traceroute.
-T&amp;lt;0-5&amp;gt;: paranoid|sneaky|polite|normal|aggressive|insane, timing template (higher is faster)
         0 and 1 is slow but useful to evade IDS alerts
-O: OS detection
-sV: Probe open ports to determine service/version info
nmap -A -T4 target
nmap -sS -O -sV -T4 target
nmap -p 1-65535 -sS -sV -T4 target			# full TCP port scan
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;remote-os-and-service-detection&#34;&gt;Remote OS and Service Detection&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -sS -n -O -sV --version-intensity [0-9] -T[0-5] target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-09.png&#34; alt=&#34;scan-the-internet-with-nmap-09&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-10.png&#34; alt=&#34;scan-the-internet-with-nmap-10&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;host-and-port-state-reason&#34;&gt;Host and Port State Reason&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--reason (Host and port state reasons)
   Display the reason a port is in a particular state:
   For e.g., a RST packet from a closed port or an echo reply from an alive host.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-11.png&#34; alt=&#34;scan-the-internet-with-nmap-11&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;list-of-examples&#34;&gt;List of Examples&lt;/h1&gt;

&lt;p&gt;A full-scan to see whether the which ports/packets can pass through the firewall unfiltered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-sA: TCP ACK scan, to map out firewall rulesets: stateful or not and which ports are filtered.
-f: fragmet packets, splits the packets into 8 bytes or less after the IP header.
    A 20-byte TCP header would be split into 3 packets. 2 with 8 bytes of the TCP header,
    and 1 with the final 4.
    Specify -ff to use 16 bytes per fragment (reducing the number of fragments).
    The purpose is to make it harder for packet filters, IDS.
-r: do not randomize port, scan in numerical order
nmap -v -p 1-65535 -sA -ff -r -n 192.168.1.1/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scan the network for suspicious malware infected open ports:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-PE: ICMP Echo			# ICMP ping echo (host discovery)
-sS: TCP SYN Scan
-sU: UDP Scan
-p U:2140,T:2745		# UDP port 2140, TCP port 2745
nmap -PE -sS -sU -sV -p U:2140,T:2745 172.16.0.0/12
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://nmap.org/book/man-port-specification.html&#34;&gt;https://nmap.org/book/man-port-specification.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hping3 use cases</title>
      <link>https://tzyluen.github.io/post/hping3-use-cases/</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/hping3-use-cases/</guid>
      <description>

&lt;h1 id=&#34;hping3-and-the-firewall&#34;&gt;hping3 and the firewall&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Mode
  default mode     TCP
  -0  --rawip      RAW IP mode
  -1  --icmp       ICMP mode
  -2  --udp        UDP mode
  -8  --scan       SCAN mode.
                   Example: hping --scan 1-30,70-90 -S www.target.host
  -9  --listen     listen mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;icmp-mode&#34;&gt;ICMP mode:&lt;/h2&gt;

&lt;p&gt;The typical &lt;code&gt;ping&lt;/code&gt; utility and the hping3 equivalent, sending ICMP-echo and receiving ICMP-reply:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ping google.com -c 3
PING google.com (216.58.196.14) 56(84) bytes of data.
64 bytes from google.com (216.58.196.14): icmp_seq=1 ttl=57 time=23.0 ms
64 bytes from google.com (216.58.196.14): icmp_seq=2 ttl=57 time=21.9 ms
64 bytes from google.com (216.58.196.14): icmp_seq=3 ttl=57 time=25.3 ms

--- google.com ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2002ms
rtt min/avg/max/mdev = 21.960/23.479/25.386/1.436 ms


$ ping utm.my -c 5
PING utm.my (161.139.21.51) 56(84) bytes of data.

--- utm.my ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 4103ms


$ sudo hping3 -1 utm.my -c 5
HPING utm.my (eth0 161.139.21.51): icmp mode set, 28 headers + 0 data bytes

--- utm.my hping statistic ---
5 packets transmitted, 0 packets received, 100% packet loss
round-trip min/avg/max = 0.0/0.0/0.0 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the default ping &amp;lsquo;ICMP echo&amp;rsquo; request was blocked, use other modes and ports.&lt;/p&gt;

&lt;h2 id=&#34;tcp-mode&#34;&gt;TCP mode:&lt;/h2&gt;

&lt;p&gt;TCP ping to port 80&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-S, set SYN flag
-p, set port number
-c, count

$ sudo hping3 -S utm.my -p 80 -c 3
HPING utm.my (enp0s3 161.139.21.51): S set, 40 headers + 0 data bytes
len=46 ip=161.139.21.51 ttl=57 DF id=0 sport=80 flags=SA seq=0 win=14600 rtt=27.6 ms
len=46 ip=161.139.21.51 ttl=57 DF id=0 sport=80 flags=SA seq=1 win=14600 rtt=31.4 ms
len=46 ip=161.139.21.51 ttl=57 DF id=0 sport=80 flags=SA seq=2 win=14600 rtt=135.1 ms

--- utm.my hping statistic ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max = 27.6/64.7/135.1 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the ping responses with &lt;strong&gt;&lt;code&gt;flags=SA&lt;/code&gt;&lt;/strong&gt;, the abbreviated flags are &lt;strong&gt;&lt;code&gt;SYN/ACK&lt;/code&gt;&lt;/strong&gt; from the TCP flags:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CWR&lt;/td&gt;
&lt;td&gt;Congestion Window Reduced (CWR) flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ECE (ECN-Echo)&lt;/td&gt;
&lt;td&gt;indicate that the TCP peer is ECN capable during 3-way handshake.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;indicates that the URGent pointer field is significant&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ACK&lt;/td&gt;
&lt;td&gt;indicates that the ACKnowledgment field is significant (Sometimes abbreviated by tcpdump as &amp;ldquo;.&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PSH&lt;/td&gt;
&lt;td&gt;Push function&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td&gt;Reset the connection (Seen on rejected connections)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SYN&lt;/td&gt;
&lt;td&gt;Synchronize sequence numbers (Seen on new connections)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FIN&lt;/td&gt;
&lt;td&gt;No more data from sender (Seen after a connection is closed)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;source: &lt;a href=&#34;https://doc.pfsense.org/index.php/What_are_TCP_Flags&#34;&gt;https://doc.pfsense.org/index.php/What_are_TCP_Flags&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;udp-mode&#34;&gt;UDP mode:&lt;/h2&gt;

&lt;p&gt;UDP ping to port 53 (DNS)&lt;/p&gt;

&lt;p&gt;If port 53 (DNS) is not filtered, but closed/not listening on the server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;host: 192.168.1.9
53                         ALLOW IN    Anywhere                  
53 (v6)                    ALLOW IN    Anywhere (v6)             
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.10:~# nmap -sT -sU 192.168.1.9
...
Not shown: 999 open|filtered ports, 995 filtered ports
PORT     STATE  SERVICE
22/tcp   open   ssh
53/tcp   closed domain
80/tcp   open   http
3000/tcp closed ppp
8080/tcp open   http-proxy
53/udp   closed domain
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the TCP responses with &lt;code&gt;RA&lt;/code&gt;, similarly the UDP ping also reponse and both with 0 packet loss.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.10:~# hping3 -S 192.168.1.9 -p 53 -c 1
HPING 192.168.1.9 (eth0 192.168.1.9): S set, 40 headers + 0 data bytes
len=46 ip=192.168.1.9 ttl=64 DF id=21027 sport=53 flags=RA seq=0 win=0 rtt=5.8 ms

--- 192.168.1.9 hping statistic ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 5.8/5.8/5.8 ms


192.168.1.10:~# hping3 -2 192.168.1.9 -p 53 -c 1
HPING 192.168.1.9 (eth0 192.168.1.9): udp mode set, 28 headers + 0 data bytes
ICMP Port Unreachable from ip=192.168.1.9 name=UNKNOWN   
status=0 port=2391 seq=0

--- 192.168.1.9 hping statistic ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 30.5/30.5/30.5 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise, if port 53 (DNS) is filtered (rejected), the response flags would also be &lt;code&gt;RA&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;host: 192.168.1.9
53/tcp                     REJECT IN   Anywhere                  
53/udp                     REJECT IN   Anywhere                  
53/tcp (v6)                REJECT IN   Anywhere (v6)             
53/udp (v6)                REJECT IN   Anywhere (v6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.10:~# hping3 -S 192.168.1.9 -p 53 -c 1
HPING 192.168.1.9 (eth0 192.168.1.9): S set, 40 headers + 0 data bytes
len=46 ip=192.168.1.9 ttl=64 DF id=0 sport=53 flags=RA seq=0 win=0 rtt=6.2 ms

--- 192.168.1.9 hping statistic ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 6.2/6.2/6.2 ms


192.168.1.10:~# hping3 -2 192.168.1.9 -p 53 -c 1
HPING 192.168.1.9 (eth0 192.168.1.9): udp mode set, 28 headers + 0 data bytes
ICMP Port Unreachable from ip=192.168.1.9 name=UNKNOWN   
status=0 port=1480 seq=0

--- 192.168.1.9 hping statistic ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 63.7/63.7/63.7 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scan-mode&#34;&gt;SCAN mode:&lt;/h2&gt;

&lt;p&gt;low-level automated port scanner (port range), possible to uncover subtle aspects of hosts behind the firewall.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.10:~# hping3 -8 21-80 -S 192.168.1.9
Scanning 192.168.1.9 (192.168.1.9), port 21-80
60 ports to scan, use -V to see all the replies
+----+-----------+---------+---+-----+-----+-----+
|port| serv name |  flags  |ttl| id  | win | len |
+----+-----------+---------+---+-----+-----+-----+
   22 ssh        : .S..A...  64     0 29200    46
   80 http       : .S..A...  64     0 29200    46
All replies received. Done.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>