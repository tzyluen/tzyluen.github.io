<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gdb on Technical Notes</title>
    <link>https://tzyluen.github.io/tags/gdb/index.xml</link>
    <description>Recent content in Gdb on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015. All rights reserved.</copyright>
    <atom:link href="https://tzyluen.github.io/tags/gdb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Killing TCP connections</title>
      <link>https://tzyluen.github.io/post/killing-tcp-connections/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/killing-tcp-connections/</guid>
      <description>

&lt;h1 id=&#34;tcpkill&#34;&gt;Tcpkill&lt;/h1&gt;

&lt;p&gt;enables priviledged user to kill TCP connections, it uses the tcpdump expression. It&amp;rsquo;s part of the &lt;strong&gt;dsniff&lt;/strong&gt; package. The default degree of brute force to use in killing a connection is 3, fast connections may require a higher number in order to land a RST in the moving receive window.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tcpkill [-i interface] [-1...9] expression
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, to kill the established and also to prevent any connections from 192.168.1.7 (client) to 192.168.1.9 (server) on port 22, use the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ sudo /usr/sbin/tcpkill -i enp0s3 src 192.168.1.7 and dst port 22
tcpkill: listening on enp0s3 [src 192.168.1.7 and dst port 22] 
192.168.1.7:57502 &amp;gt; 192.168.1.9:22: R 462778052:462778052(0) win 0
192.168.1.7:57502 &amp;gt; 192.168.1.9:22: R 462782148:462782148(0) win 0
192.168.1.7:57502 &amp;gt; 192.168.1.9:22: R 462790340:462790340(0) win 0
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the receiving end 192.168.1.7 (client), connection is killed and new connection is denied:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ wpacket_write_wait: Connection to 192.168.1.9: Broken pipe
192.168.1.7:~$ 
192.168.1.7:~$ ssh tzy@192.168.1.9
192.168.1.9&#39;s password: 
ssh_dispatch_run_fatal: Connection to 192.168.1.9: Broken pipe
192.168.1.7:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;gdb&#34;&gt;GDB&lt;/h1&gt;

&lt;p&gt;If only the socket required to close but the process must keep alive, we could attach the process under a debugger and close the FD (file descriptor).&lt;/p&gt;

&lt;p&gt;To illustrate, open a simple client (192.168.1.7) and server (192.168.1.9) TCP connection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ ncat -v -l -p 9999
Ncat: Version 7.40 ( https://nmap.org/ncat )
Ncat: Listening on :::9999
Ncat: Listening on 0.0.0.0:9999
Ncat: Connection from 192.168.1.7.
Ncat: Connection from 192.168.1.7:65253.
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.7:~$ nc 192.168.1.9 9999
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ netstat -ptuW
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 192.168.1.9:9999        192.168.1.7:65253       ESTABLISHED 4050/ncat           
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Locate and identify the target socket&amp;rsquo;s file, &lt;code&gt;$pid&lt;/code&gt;, i.e., &lt;code&gt;4050&lt;/code&gt; and also the &lt;code&gt;FD&lt;/code&gt;, i.e., &lt;code&gt;5u&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ lsof -np $pid 
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME
ncat    4050  tzy    5u  IPv4  31028      0t0    TCP 192.168.1.9:9999-&amp;gt;192.168.1.7:65253 (ESTABLISHED)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then attach the process to gdb, close the socket with the &lt;code&gt;FD&lt;/code&gt; identifier and detach the debugger with quit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ gdb -p $pid
...
(gdb) call close(5u)
$1 = 0
(gdb) quit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>