<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Firewall on Technical Notes</title>
    <link>https://tzyluen.github.io/tags/firewall/index.xml</link>
    <description>Recent content in Firewall on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015. All rights reserved.</copyright>
    <atom:link href="https://tzyluen.github.io/tags/firewall/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Port-knocking</title>
      <link>https://tzyluen.github.io/post/port-knocking/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/port-knocking/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Port-knocking is a stealth method to open ports that the firewall keeps closed by default. A port-knock server listens to all traffic on an ethernet (or PPP) interface, looking for a special &amp;ldquo;knock&amp;rdquo; sequences of port-hits.&lt;/p&gt;

&lt;p&gt;A client system makes these port-hits by sending a TCP (or UDP) packet to a port on the server. When the server detects a specific sequence of port-hits, it runs a command defined in its configuration file. This can be used to open up holes in a firewall for quick access. The primary benefit is that it suppresses the regular port scan and appears as not availale.&lt;/p&gt;

&lt;p&gt;Essentially, the port-knocking strategy is security by obscurity.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;enabling-knockd&#34;&gt;Enabling knockd&lt;/h1&gt;

&lt;p&gt;A prerequisite to enable port-knocking is &lt;code&gt;iptables&lt;/code&gt;. The &lt;code&gt;knockd&lt;/code&gt; is a small port-knock daemon that implements the port-knock server, dynamically manipulate the firewall rules to open and close ports.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ sudo apt-get install knockd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the default configuration, enable the service at init and set the target network interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ sudo vim /etc/default/knockd
...
START_KNOCKD=1
KNOCKD_OPTS=&amp;quot;-i enp0s3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the desired port-knocking sequence &lt;code&gt;1300&lt;/code&gt;, &lt;code&gt;8888&lt;/code&gt;, &lt;code&gt;9394&lt;/code&gt; in &lt;code&gt;/etc/knockd.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[options]
        #UseSyslog
        logfile     = /var/log/knockd.log

[openSSH]
        #sequence    = 1300:tcp,8888:udp,9394:tcp
        sequence    = 1300,8888,9394
        seq_timeout = 10
        command     = /sbin/iptables -A INPUT -s %IP% -p tcp --dport 22 -j ACCEPT
        tcpflags    = syn

[closeSSH]
        sequence    = 9394,8888,1300
        seq_timeout = 10
        command     = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 22 -j ACCEPT
        tcpflags    = syn
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start the service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ sudo systemctl start knockd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;port-knocking&#34;&gt;Port-knocking&lt;/h1&gt;

&lt;h2 id=&#34;using-knock&#34;&gt;Using Knock&lt;/h2&gt;

&lt;p&gt;The utility from the &lt;code&gt;knockd&lt;/code&gt; package.&lt;/p&gt;

&lt;h3 id=&#34;open-the-port&#34;&gt;Open the port&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.11:~$ knock -v 192.168.1.9 1300 8888 9394
hitting tcp 192.168.1.9:1300
hitting tcp 192.168.1.9:8888
hitting tcp 192.168.1.9:9394
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; it&amp;rsquo;s possible to combine TCP and UDP port:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.11:~$ knock -v 192.168.1.9 1300:tcp 8888:udp 9394:tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;close-the-port&#34;&gt;Close the port&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.11:~$ knock -v 192.168.1.9 9394 8888 1300
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-hping3-nmap&#34;&gt;Using Hping3 / Nmap&lt;/h2&gt;

&lt;p&gt;The following comes handy for any remote system to makes port-hits without install the &lt;code&gt;knockd&lt;/code&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-S: set SYN tcp flag
-p: port
-c: count, stop after sending (and receiving) count response packets
hping3 -S -p $ARG -c 1 $HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple shell script &lt;code&gt;port-knocking.sh&lt;/code&gt; to knocks target host &lt;code&gt;$HOST&lt;/code&gt; of &lt;code&gt;$@&lt;/code&gt; (list of sequences) iteratively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
HOST=$1
shift
for ARG in &amp;quot;$@&amp;quot;
do
    hping3 -S -p $ARG -c 1 $HOST
    #nmap -Pn --host-timeout 100 --max-retries 0 -p $ARG $HOST
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;open-the-port-1&#34;&gt;Open the port&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Initial state - 192.168.1.9 port 22/tcp closed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-01.png&#34; alt=&#34;port-knocking-01&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Connection timed out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-02.png&#34; alt=&#34;port-knocking-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Knocks and opens 192.168.1.9:22 with SYN tcpflag and port 1300, 8888, 9394 sequence:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-03.png&#34; alt=&#34;port-knocking-03&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connects to the host:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-05.png&#34; alt=&#34;port-knocking-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;/var/log/knockd.log&lt;/code&gt; entries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
[2016-09-03 18:20] 192.168.1.11: openSSH: Stage 1
[2016-09-03 18:20] 192.168.1.11: openSSH: Stage 2
[2016-09-03 18:20] 192.168.1.11: openSSH: Stage 3
[2016-09-03 18:20] 192.168.1.11: openSSH: OPEN SESAME
[2016-09-03 18:20] openSSH: running command: /sbin/iptables -A INPUT -s 192.168.1.11 -p tcp --dport 22 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;close-the-port-1&#34;&gt;Close the port&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Runs the &lt;code&gt;port-knocking.sh&lt;/code&gt; script and pass the close port sequence 9394, 8888, 1300:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/port-knocking-04.png&#34; alt=&#34;port-knocking-04&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;/var/log/knockd.log&lt;/code&gt; entries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
[2016-09-03 19:37] 192.168.1.11: closeSSH: Stage 1
[2016-09-03 19:37] 192.168.1.11: closeSSH: Stage 2
[2016-09-03 19:37] 192.168.1.11: closeSSH: Stage 3
[2016-09-03 19:37] 192.168.1.11: closeSSH: OPEN SESAME
[2016-09-03 19:37] closeSSH: running command: /sbin/iptables -D INPUT -s 192.168.1.11 -p tcp --dport 22 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;alternative&#34;&gt;Alternative&lt;/h1&gt;

&lt;p&gt;There are a lot of existing implementations available to support various platforms [1].
For instance, a more advanced &lt;code&gt;fwknop&lt;/code&gt; [2] which implements an authorization scheme known as Single Packet Authorization (SPA) for strong service concealment.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://www.portknocking.org/view/implementations&#34;&gt;http://www.portknocking.org/view/implementations&lt;/a&gt; &lt;br&gt;
[2] &lt;a href=&#34;https://github.com/mrash/fwknop&#34;&gt;https://github.com/mrash/fwknop&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Firewall: iptables/ufw enablement</title>
      <link>https://tzyluen.github.io/post/firewall-iptables-ufw-enablement/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/firewall-iptables-ufw-enablement/</guid>
      <description>

&lt;h1 id=&#34;iptables&#34;&gt;Iptables&lt;/h1&gt;

&lt;p&gt;List the configured rules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# iptables -L
# iptables -L -t nat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;iptables&lt;/code&gt; contains 5 tables, (&lt;code&gt;-t&lt;/code&gt;, &lt;code&gt;--tables&lt;/code&gt;): &lt;code&gt;raw&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;nat&lt;/code&gt;, &lt;code&gt;mangle&lt;/code&gt; and &lt;code&gt;security&lt;/code&gt;. In common use cases, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;nat&lt;/code&gt; is used, where filter is associated with the firewall and nat is used for network address translation such as port forwarding.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;enabling-ufw-uncomplicated-firewall&#34;&gt;Enabling ufw (uncomplicated firewall)&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw enable
# ufw disable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the service is running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# systemctl list-unit-files ufw.service
# systemctl status ufw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the default rules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw status verbose
# ufw show raw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the default rules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw default deny incoming
# ufw default allow outgoing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;firewall rules are read from top-to-bottom, left-to-right; therefore, once a rule is matched the others will not be evaluated, so put specific rules first.&lt;/p&gt;

&lt;h2 id=&#34;manage-ufw-by-predefined-service-names&#34;&gt;Manage &lt;code&gt;ufw&lt;/code&gt; by predefined service names&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw app list          // list application profiles
# ufw app info SSH      // show information on profile SSH
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw allow &amp;lt;service_name&amp;gt;
# ufw deny &amp;lt;service_name&amp;gt;       // will drop the connection immediately, client will get the timeout response
# ufw reject &amp;lt;service_name&amp;gt;     // will drop the connection immediately
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extended-syntax&#34;&gt;Extended syntax&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw allow from &amp;lt;ip_addr&amp;gt;/[subnet] to any app &amp;lt;service_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, SSH service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw allow ssh                 // open port 22(SSH) for incoming,
# ufw delete allow ssh          // and to delete the opened ssh rules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WWW service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw allow from 192.168.1.1/24 to any app WWW
# ufw delete allow from 192.168.1.1/24 to any app WWW
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use numeric port, open port 3000 (ntop-ng) to 192.168.1.7 only:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw allow from 192.168.1.7 to any port 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reorders-rirewall-rules&#34;&gt;Reorders rirewall rules&lt;/h2&gt;

&lt;p&gt;Rules are read from top-to-bottom, left-to-right, so rule (8) will not work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw status numbered
Status: active

     To                         Action      From
     --                         ------      ----
[ 1] WWW                        ALLOW IN    192.168.1.0/24            
[ 2] SSH                        ALLOW IN    192.168.1.0/24            
[ 3] 3000                       ALLOW IN    192.168.1.7               
[ 4] 8001                       ALLOW IN    192.168.1.7               
[ 5] 8005                       ALLOW IN    192.168.1.7               
[ 6] 8080                       ALLOW IN    192.168.1.7               
[ 7] 1313                       ALLOW IN    192.168.1.7               
[ 8] Anywhere                   REJECT IN   192.168.1.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete rule (8) and recrete/insert to rule (1):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ufw delete 8
# ufw insert 1 reject from 192.168.1.4 to any
Rule inserted
# ufw status numbered
Status: active

     To                         Action      From
     --                         ------      ----
[ 1] Anywhere                   REJECT IN   192.168.1.4               
[ 2] WWW                        ALLOW IN    192.168.1.0/24            
[ 3] SSH                        ALLOW IN    192.168.1.0/24            
[ 4] 3000                       ALLOW IN    192.168.1.7               
[ 5] 8001                       ALLOW IN    192.168.1.7               
[ 6] 8005                       ALLOW IN    192.168.1.7               
[ 7] 8080                       ALLOW IN    192.168.1.7               
[ 8] 1313                       ALLOW IN    192.168.1.7               
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;difference-between-deny-and-reject&#34;&gt;Difference between: DENY and REJECT&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DENY&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;&lt;li&gt;uses the DROP from the iptables, it silently discards the incoming packets.&lt;/li&gt;&lt;li&gt;will keep the sender waiting until connection attempt times out.&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;REJECT&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;&lt;li&gt;uses the REJECT from the iptables, it sends back an error (RST) packet to the sender of the rejected packet.&lt;/li&gt;&lt;li&gt;effect immediately with connection refused message.&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>