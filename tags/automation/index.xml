<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation on Technical Notes</title>
    <link>https://tzyluen.github.io/tags/automation/index.xml</link>
    <description>Recent content in Automation on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015. All rights reserved.</copyright>
    <atom:link href="https://tzyluen.github.io/tags/automation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Automate port scanning with Nmap &amp; Ndiff</title>
      <link>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</guid>
      <description>

&lt;h1 id=&#34;nmap-ndiff&#34;&gt;Nmap Ndiff&lt;/h1&gt;

&lt;p&gt;Ndiff is a tool to aid in the comparison of Nmap scans. Ndiff, like the standard diff utility, compares two scans at a time. It takes two Nmap XML output files and prints the differences between them. The differences observed are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Host states (e.g. up to down)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Port states (e.g. open to closed)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Service versions (from -sV)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OS matches (from -O)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Script output&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;scan-and-interpret-the-results-diffs&#34;&gt;Scan and interpret the results/diffs&lt;/h2&gt;

&lt;p&gt;Do a fast scan &lt;code&gt;-F&lt;/code&gt;, and output result in XML format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -F -sS -sV -oX 192-168-1-10-$(date +%F-%R) 192.168.1.10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do a full TCP port scan, service/version detection and output result in XML format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -p 1-65535 -sS -sV -oX 192-168-1-10-$(date +%F-%R) 192.168.1.10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare the two results with &lt;code&gt;ndiff&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v, --verbose
   Include all hosts and ports in the output, not only those that have changed.
ndiff -v file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full TCP port scan (&lt;code&gt;-p 1-65535&lt;/code&gt;) exposed 3 additional ports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scanning-a-network-on-a-schedule-with-nmap-ndiff-01.png&#34; alt=&#34;scanning-a-network-on-a-schedule-with-nmap-ndiff-01&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;

&lt;p&gt;Put the regular &lt;code&gt;nmap&lt;/code&gt; scan into a script and &lt;code&gt;ndiff&lt;/code&gt; its XML format results, and &lt;code&gt;mailto&lt;/code&gt; the target recipient(s):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script:&lt;/strong&gt; &lt;code&gt;001-LAN-192-168-1-daily.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
BASENAME=&amp;quot;001-LAN-192-168-1-daily-scan&amp;quot;
TARGETS=&amp;quot;192.168.1.1/24&amp;quot;
OPTIONS=&amp;quot;-v --top-ports 1000 -T4 -sV&amp;quot;
date=`date +%F`
cd /home/tzy/scans
nmap $OPTIONS $TARGETS -oA $BASENAME-$date &amp;gt; /dev/null
if [ -e $BASENAME-prev.xml ]; then
       ndiff $BASENAME-prev.xml $BASENAME-$date.xml &amp;gt; $BASENAME-diff-$date
       echo &amp;quot;*** NDIFF RESULTS ***&amp;quot;
       cat $BASENAME-diff-$date
       echo
fi
echo &amp;quot;*** NMAP RESULTS ***&amp;quot;
cat $BASENAME-$date.nmap
ln -sf $BASENAME-$date.xml $BASENAME-prev.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; weekly scan can be extended to full TCP scan such as: &lt;code&gt;-v -p 1-65535 -T4 -sV&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crontab:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAILTO=tzy
0 0 * * 1-6 /root/cron/001-LAN-192-168-1-daily.sh    # daily at 00:00AM, Mon-Sat 
0 0 * * sun /root/cron/001-LAN-192-168-1-weekly.sh   # weekly at 00:00AM, Sun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it can be easily extended to include weekly, monthly, policy-based scans with carefully crafted scanning strategy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scanning malicious urls (PhantomJS &#43; Google Safe Browsing API)</title>
      <link>https://tzyluen.github.io/post/scanning-malicious-urls-phantomjs-google-safe-browsing-api/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scanning-malicious-urls-phantomjs-google-safe-browsing-api/</guid>
      <description>

&lt;p&gt;My examples are in JS, on PhantomJS headless browser, it could be easily adapted to other languages. The script traverses a webpage and harvests all the URLs therein to check for malware/malicious sites through the Google Safe Browsing API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;192.168.1.9:~$ phantomjs chk-malinks.js http://some.malware.site
1: hshd.io
2: sourceforge.net
3: popup.taboola.com
4: www.geeksvip.com
5: my.hear.com
...
159: nba1001.net
160: www.pressroomvip.com
161: tracking.lifestylejournal.com
162: dsct2.com
163: www.historynut.com
164: www.buro247.my
gsafe response json:{
  &amp;quot;matches&amp;quot;: [
    {
      &amp;quot;threatType&amp;quot;: &amp;quot;MALWARE&amp;quot;,
      &amp;quot;platformType&amp;quot;: &amp;quot;ANY_PLATFORM&amp;quot;,
      &amp;quot;threat&amp;quot;: {
        &amp;quot;url&amp;quot;: &amp;quot;nba1001.net&amp;quot;
      },
      &amp;quot;cacheDuration&amp;quot;: &amp;quot;300s&amp;quot;,
      &amp;quot;threatEntryType&amp;quot;: &amp;quot;URL&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;google-safe-browsing&#34;&gt;Google Safe Browsing&lt;/h3&gt;

&lt;p&gt;To use Google Safe Browsing APIs, get the API key from Google Developer Console. [1] The API calls is limit to 500 urls per request, and maximum of 10,000 requests per day.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Line 7-8 defines the API key and the Google Safe Browsing API URL.&lt;/li&gt;
&lt;li&gt;Line 67-85 defines the Request settings, and line 71 is the Request header.&lt;/li&gt;
&lt;li&gt;Line 74-83 is the Request body. The request body includes the client information (ID and version) and the threat information (the list names and the URLs).&lt;/li&gt;
&lt;li&gt;Line 88-97 make the request to Google Safe Browsing API server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the code are auxiliary functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Line 35-61 parse the webpage, extract and collect URLs.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/tzyluen/4c41d7a0d6002fe828f9d932232813ed.js&#34;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;
[1] &lt;a href=&#34;https://developers.google.com/safe-browsing/v4/get-started&#34;&gt;https://developers.google.com/safe-browsing/v4/get-started&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>