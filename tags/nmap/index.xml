<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nmap on Technical Notes</title>
    <link>https://tzyluen.github.io/tags/nmap/index.xml</link>
    <description>Recent content in Nmap on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015. All rights reserved.</copyright>
    <atom:link href="https://tzyluen.github.io/tags/nmap/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Nmap top 1000 ports</title>
      <link>https://tzyluen.github.io/post/nmap-top-1000-ports/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/nmap-top-1000-ports/</guid>
      <description>&lt;p&gt;In the &lt;em&gt;Nmap Network Scanning&lt;/em&gt; book, chapter 15, section &lt;em&gt;Port Specification and Scan Order&lt;/em&gt;, quote &amp;ldquo;By default, Nmap scans the most common 1,000 ports for each protocol.&amp;rdquo; [1]&lt;/p&gt;

&lt;p&gt;However, the documentation did not mention the list of 1000 ports.&lt;/p&gt;

&lt;p&gt;How to identify and show those ports ?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--top-ports n: the n highest-ratio ports found in nmap-services. n must be 1 or greater
-v: verbose level, to print the 
-oG: grepable output
- : output to stdout
nmap --top-ports 1000 -v -oG - localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; refer to &lt;code&gt;/usr/share/nmap/nmap-services&lt;/code&gt; file for the service name and protocol.&lt;/p&gt;

&lt;p&gt;So put all together, and process the output in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nmap --top-ports 1000 localhost -v -oG - | grep &#39;Ports scanned&#39; | cut -d&amp;quot; &amp;quot; -f4 | tr &#39;,;&#39; &#39;\n&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;TCP(1000
1
3-4
6-7
9
13
17
19-26
30
32-33
37
42-43
49
53
70
79-85
88-90
99-100
106
109-111
113
119
125
135
139
143-144
146
161
163
179
199
211-212
222
254-256
259
264
280
301
306
311
340
366
389
406-407
416-417
425
427
443-445
458
464-465
481
497
500
512-515
524
541
543-545
548
554-555
563
587
593
616-617
625
631
636
646
648
666-668
683
687
691
700
705
711
714
720
722
726
749
765
777
783
787
800-801
808
843
873
880
888
898
900-903
911-912
981
987
990
992-993
995
999-1002
1007
1009-1011
1021-1100
1102
1104-1108
1110-1114
1117
1119
1121-1124
1126
1130-1132
1137-1138
1141
1145
1147-1149
1151-1152
1154
1163-1166
1169
1174-1175
1183
1185-1187
1192
1198-1199
1201
1213
1216-1218
1233-1234
1236
1244
1247-1248
1259
1271-1272
1277
1287
1296
1300-1301
1309-1311
1322
1328
1334
1352
1417
1433-1434
1443
1455
1461
1494
1500-1501
1503
1521
1524
1533
1556
1580
1583
1594
1600
1641
1658
1666
1687-1688
1700
1717-1721
1723
1755
1761
1782-1783
1801
1805
1812
1839-1840
1862-1864
1875
1900
1914
1935
1947
1971-1972
1974
1984
1998-2010
2013
2020-2022
2030
2033-2035
2038
2040-2043
2045-2049
2065
2068
2099-2100
2103
2105-2107
2111
2119
2121
2126
2135
2144
2160-2161
2170
2179
2190-2191
2196
2200
2222
2251
2260
2288
2301
2323
2366
2381-2383
2393-2394
2399
2401
2492
2500
2522
2525
2557
2601-2602
2604-2605
2607-2608
2638
2701-2702
2710
2717-2718
2725
2800
2809
2811
2869
2875
2909-2910
2920
2967-2968
2998
3000-3001
3003
3005-3007
3011
3013
3017
3030-3031
3052
3071
3077
3128
3168
3211
3221
3260-3261
3268-3269
3283
3300-3301
3306
3322-3325
3333
3351
3367
3369-3372
3389-3390
3404
3476
3493
3517
3527
3546
3551
3580
3659
3689-3690
3703
3737
3766
3784
3800-3801
3809
3814
3826-3828
3851
3869
3871
3878
3880
3889
3905
3914
3918
3920
3945
3971
3986
3995
3998
4000-4006
4045
4111
4125-4126
4129
4224
4242
4279
4321
4343
4443-4446
4449
4550
4567
4662
4848
4899-4900
4998
5000-5004
5009
5030
5033
5050-5051
5054
5060-5061
5080
5087
5100-5102
5120
5190
5200
5214
5221-5222
5225-5226
5269
5280
5298
5357
5405
5414
5431-5432
5440
5500
5510
5544
5550
5555
5560
5566
5631
5633
5666
5678-5679
5718
5730
5800-5802
5810-5811
5815
5822
5825
5850
5859
5862
5877
5900-5904
5906-5907
5910-5911
5915
5922
5925
5950
5952
5959-5963
5987-5989
5998-6007
6009
6025
6059
6100-6101
6106
6112
6123
6129
6156
6346
6389
6502
6510
6543
6547
6565-6567
6580
6646
6666-6669
6689
6692
6699
6779
6788-6789
6792
6839
6881
6901
6969
7000-7002
7004
7007
7019
7025
7070
7100
7103
7106
7200-7201
7402
7435
7443
7496
7512
7625
7627
7676
7741
7777-7778
7800
7911
7920-7921
7937-7938
7999-8002
8007-8011
8021-8022
8031
8042
8045
8080-8090
8093
8099-8100
8180-8181
8192-8194
8200
8222
8254
8290-8292
8300
8333
8383
8400
8402
8443
8500
8600
8649
8651-8652
8654
8701
8800
8873
8888
8899
8994
9000-9003
9009-9011
9040
9050
9071
9080-9081
9090-9091
9099-9103
9110-9111
9200
9207
9220
9290
9415
9418
9485
9500
9502-9503
9535
9575
9593-9595
9618
9666
9876-9878
9898
9900
9917
9929
9943-9944
9968
9998-10004
10009-10010
10012
10024-10025
10082
10180
10215
10243
10566
10616-10617
10621
10626
10628-10629
10778
11110-11111
11967
12000
12174
12265
12345
13456
13722
13782-13783
14000
14238
14441-14442
15000
15002-15004
15660
15742
16000-16001
16012
16016
16018
16080
16113
16992-16993
17877
17988
18040
18101
18988
19101
19283
19315
19350
19780
19801
19842
20000
20005
20031
20221-20222
20828
21571
22939
23502
24444
24800
25734-25735
26214
27000
27352-27353
27355-27356
27715
28201
30000
30718
30951
31038
31337
32768-32785
33354
33899
34571-34573
35500
38292
40193
40911
41511
42510
44176
44442-44443
44501
45100
48080
49152-49161
49163
49165
49167
49175-49176
49400
49999-50003
50006
50300
50389
50500
50636
50800
51103
51493
52673
52822
52848
52869
54045
54328
55055-55056
55555
55600
56737-56738
57294
57797
58080
60020
60443
61532
61900
62078
63331
64623
64680
65000
65129
65389)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://nmap.org/book/man-port-specification.html&#34;&gt;https://nmap.org/book/man-port-specification.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automate port scanning with Nmap &amp; Ndiff</title>
      <link>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</guid>
      <description>

&lt;h1 id=&#34;nmap-ndiff&#34;&gt;Nmap Ndiff&lt;/h1&gt;

&lt;p&gt;Ndiff is a tool to aid in the comparison of Nmap scans. Ndiff, like the standard diff utility, compares two scans at a time. It takes two Nmap XML output files and prints the differences between them. The differences observed are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Host states (e.g. up to down)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Port states (e.g. open to closed)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Service versions (from -sV)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OS matches (from -O)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Script output&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;scan-and-interpret-the-results-diffs&#34;&gt;Scan and interpret the results/diffs&lt;/h2&gt;

&lt;p&gt;Do a fast scan &lt;code&gt;-F&lt;/code&gt;, and output result in XML format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -F -sS -sV -oX 192-168-1-10-$(date +%F-%R) 192.168.1.10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do a full TCP port scan, service/version detection and output result in XML format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -p 1-65535 -sS -sV -oX 192-168-1-10-$(date +%F-%R) 192.168.1.10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare the two results with &lt;code&gt;ndiff&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v, --verbose
   Include all hosts and ports in the output, not only those that have changed.
ndiff -v file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full TCP port scan (&lt;code&gt;-p 1-65535&lt;/code&gt;) exposed 3 additional ports:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scanning-a-network-on-a-schedule-with-nmap-ndiff-01.png&#34; alt=&#34;scanning-a-network-on-a-schedule-with-nmap-ndiff-01&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;

&lt;p&gt;Put the regular &lt;code&gt;nmap&lt;/code&gt; scan into a script and &lt;code&gt;ndiff&lt;/code&gt; its XML format results, and &lt;code&gt;mailto&lt;/code&gt; the target recipient(s):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script:&lt;/strong&gt; &lt;code&gt;001-LAN-192-168-1-daily.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
BASENAME=&amp;quot;001-LAN-192-168-1-daily-scan&amp;quot;
TARGETS=&amp;quot;192.168.1.1/24&amp;quot;
OPTIONS=&amp;quot;-v --top-ports 1000 -T4 -sV&amp;quot;
date=`date +%F`
cd /home/tzy/scans
nmap $OPTIONS $TARGETS -oA $BASENAME-$date &amp;gt; /dev/null
if [ -e $BASENAME-prev.xml ]; then
       ndiff $BASENAME-prev.xml $BASENAME-$date.xml &amp;gt; $BASENAME-diff-$date
       echo &amp;quot;*** NDIFF RESULTS ***&amp;quot;
       cat $BASENAME-diff-$date
       echo
fi
echo &amp;quot;*** NMAP RESULTS ***&amp;quot;
cat $BASENAME-$date.nmap
ln -sf $BASENAME-$date.xml $BASENAME-prev.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; weekly scan can be extended to full TCP scan such as: &lt;code&gt;-v -p 1-65535 -T4 -sV&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crontab:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAILTO=tzy
0 0 * * 1-6 /root/cron/001-LAN-192-168-1-daily.sh    # daily at 00:00AM, Mon-Sat 
0 0 * * sun /root/cron/001-LAN-192-168-1-weekly.sh   # weekly at 00:00AM, Sun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it can be easily extended to include weekly, monthly, policy-based scans with carefully crafted scanning strategy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scan the Internet with Nmap</title>
      <link>https://tzyluen.github.io/post/scan-the-internet-with-nmap/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scan-the-internet-with-nmap/</guid>
      <description>

&lt;h1 id=&#34;scan-a-network-subnet&#34;&gt;Scan A Network/Subnet&lt;/h1&gt;

&lt;h2 id=&#34;host-discovery&#34;&gt;Host Discovery&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;HOST DISCOVERY:
-sL: List Scan - simply list targets to scan, without sending any packets to the target hosts,
                 useful to generate list of target hosts and dns resolution.
-sn: Ping Scan - disable port scan.
-Pn: Treat all hosts as online -- skip host discovery.
-PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports.
-PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes.
-n/-R: Never do DNS resolution/Always resolve.

nmap -sn 192.168.1.1/24                                     # ping scan
nmap -sn -PS22-25,80,113,1050,8080,35000 192.168.1.1/24     # custom TCP SYN scan
nmap -sn -PU82,9001,9030,9050-9051 192.168.1.1/24           # custom UDP scan
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scan-a-large-public-network&#34;&gt;Scan a large public network&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Identify the IP block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mtr -brw -y1 target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-01.png&#34; alt=&#34;scan-the-internet-with-nmap-01&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do a ping scan only (&lt;code&gt;-sn&lt;/code&gt;) and write three output formats/results (&lt;code&gt;-oA&lt;/code&gt;) to three files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -v -sn target -oA output
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Ping Scan for 4096 hosts completed in 191.33s.&lt;/li&gt;
&lt;li&gt;DNS resolution takes approx. additional 1158.11s.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-02.png&#34; alt=&#34;scan-the-internet-with-nmap-02&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-03.png&#34; alt=&#34;scan-the-internet-with-nmap-03&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the DNS resolution phase prolonged the total time (&lt;code&gt;-n&lt;/code&gt; to disable DNS resolution):&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ping scan without DNS resolution (&lt;code&gt;-n&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -v -sn -n target -oA output
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Ping Scan without DNS resolution completed in 146.49s.&lt;/li&gt;
&lt;li&gt;Total time is 147.67s, approx 10x of speedup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-04.png&#34; alt=&#34;scan-the-internet-with-nmap-04&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-05.png&#34; alt=&#34;scan-the-internet-with-nmap-05&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;scan-a-private-network-192-168-1-0-24&#34;&gt;Scan a private network: 192.168.1.0/24&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do a TCP SYN scan (&lt;code&gt;-sS&lt;/code&gt;) with OS detection (&lt;code&gt;-O&lt;/code&gt;) and output results in three major formats (&lt;code&gt;-oA&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v: increase verbosity level
-sS: TCP SYN scan
-O: enable OS detection
-n: do not do DNS resolution
-oA: output in the three major formats (nmap, gnmap, xml) at once 
nmap -v -sS -O -n target -oA output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-06.png&#34; alt=&#34;scan-the-internet-with-nmap-06&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-07.png&#34; alt=&#34;scan-the-internet-with-nmap-07&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-08.png&#34; alt=&#34;scan-the-internet-with-nmap-08&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Completed TCP SYN scan (&lt;code&gt;-sS&lt;/code&gt;) on 192.168.1.0/24 in approx. 1.94s.&lt;/li&gt;
&lt;li&gt;The default most commong 1000 ports [1], plus OS detection for 4 hosts took approx. 12.76s.&lt;/li&gt;
&lt;li&gt;Total time is 14.70s.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;scan-a-single-target&#34;&gt;Scan A Single Target&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SCAN TECHNIQUES:
 -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
 -sU: UDP Scan
 -sN/sF/sX: TCP Null, FIN, and Xmas scans
 --scanflags &amp;lt;flags&amp;gt;: Customize TCP scan flags
 -sI &amp;lt;zombie host[:probeport]&amp;gt;: Idle scan
 -sY/sZ: SCTP INIT/COOKIE-ECHO scans
 -sO: IP protocol scan
 -b &amp;lt;FTP relay host&amp;gt;: FTP bounce scan
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-A: Aggressive scan options, equivalent to -O, -sV, -sC, --traceroute.
    OS and version detection, script scanning, and traceroute.
-T&amp;lt;0-5&amp;gt;: paranoid|sneaky|polite|normal|aggressive|insane, timing template (higher is faster)
         0 and 1 is slow but useful to evade IDS alerts
-O: OS detection
-sV: Probe open ports to determine service/version info
nmap -A -T4 target
nmap -sS -O -sV -T4 target
nmap -p 1-65535 -sS -sV -T4 target			# full TCP port scan
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;remote-os-and-service-detection&#34;&gt;Remote OS and Service Detection&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap -sS -n -O -sV --version-intensity [0-9] -T[0-5] target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-09.png&#34; alt=&#34;scan-the-internet-with-nmap-09&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-10.png&#34; alt=&#34;scan-the-internet-with-nmap-10&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;host-and-port-state-reason&#34;&gt;Host and Port State Reason&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--reason (Host and port state reasons)
   Display the reason a port is in a particular state:
   For e.g., a RST packet from a closed port or an echo reply from an alive host.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/scan-the-internet-with-nmap-11.png&#34; alt=&#34;scan-the-internet-with-nmap-11&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;list-of-examples&#34;&gt;List of Examples&lt;/h1&gt;

&lt;p&gt;A full-scan to see whether the which ports/packets can pass through the firewall unfiltered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-sA: TCP ACK scan, to map out firewall rulesets: stateful or not and which ports are filtered.
-f: fragmet packets, splits the packets into 8 bytes or less after the IP header.
    A 20-byte TCP header would be split into 3 packets. 2 with 8 bytes of the TCP header,
    and 1 with the final 4.
    Specify -ff to use 16 bytes per fragment (reducing the number of fragments).
    The purpose is to make it harder for packet filters, IDS.
-r: do not randomize port, scan in numerical order
nmap -v -p 1-65535 -sA -ff -r -n 192.168.1.1/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scan the network for suspicious malware infected open ports:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-PE: ICMP Echo			# ICMP ping echo (host discovery)
-sS: TCP SYN Scan
-sU: UDP Scan
-p U:2140,T:2745		# UDP port 2140, TCP port 2745
nmap -PE -sS -sU -sV -p U:2140,T:2745 172.16.0.0/12
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://nmap.org/book/man-port-specification.html&#34;&gt;https://nmap.org/book/man-port-specification.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Traceroute, Firewalls &amp; Geo-IP</title>
      <link>https://tzyluen.github.io/post/traceroute-firewalls-geoip/</link>
      <pubDate>Sun, 24 Jan 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/traceroute-firewalls-geoip/</guid>
      <description>

&lt;h1 id=&#34;traceroute&#34;&gt;Traceroute&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Traceroute&lt;/code&gt; is useful for diagnosing networking problems, e.g., end-to-end connectivty, complement with &lt;code&gt;ping&lt;/code&gt;. It can also be used to pinpoint the location of devices, routers and firewalls. The tracerouting tools fundamentally rely on the IP packet&amp;rsquo;s field - TTL (Time-To-Live, decremented at each hop, dies at 0), they send short-life IP packets and wait for Time Exceeded ICMP packets reporting the death of these packets from a router, consequently reveal the route.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Mode:
-I, --icmp      Use ICMP ECHO for tracerouting
-T, --tcp       Use TCP SYN for tracerouting (default port is 80)
-U, --udp       Use UDP to particular port for tracerouting
                (instead of increasing the port per each probe), default port is 53
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;icmp-mode&#34;&gt;ICMP mode:&lt;/h2&gt;

&lt;p&gt;Default &lt;code&gt;traceroute&lt;/code&gt; uses &lt;code&gt;ICMP ECHO&lt;/code&gt; packets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ traceroute &amp;lt;target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;udp-mode&#34;&gt;UDP mode:&lt;/h2&gt;

&lt;p&gt;Default dest port is 53 (DNS).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ traceroute -U &amp;lt;target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For security reasons, the default traceroute&amp;rsquo;s UDP packets and ICMP Echo packets are often blocked. To evade firewalls, the following techniques can be used.&lt;/p&gt;

&lt;h2 id=&#34;tcp-mode&#34;&gt;TCP mode:&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tcptraceroute&lt;/code&gt; or &lt;code&gt;-T&lt;/code&gt; of the &lt;code&gt;traceroute&lt;/code&gt; uses TCP SYN packets (SYN packet is the first step TCP three-way handshake), which usually not blocked by firewalls, and as long as the destination port is opened. To specify the dest port, uses -p 80 (HTTP) or 443 (HTTPS), that normally allowed to egress for probes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tcptraceroute &amp;lt;target&amp;gt;
$ sudo traceroute -T &amp;lt;target&amp;gt;

# -w: wait 10 secs before timeout
# -q: set the number of probe packets per hop, default is 3, hence RTT1, RTT2, RTT3
$ traceroute -w 10 -q 3 &amp;lt;target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/plain-traceroute-my.png&#34; alt=&#34;plain-traceroute-my&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With ICMP Echo request, the packet was blocked after 58.27.14.58. With TCP SYN handshake, it passed two more hops.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/tcp-traceroute-my.png&#34; alt=&#34;tcp-traceroute-my&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;output-format-explanation&#34;&gt;Output format explanation:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;           v--- the router/ip-addr traversed by the packet 
[Hop]     [Hostname/(IP-addr)]      [RTT1]  [RTT2]  [RTT3]
 ^--- transit no. of the route       ^---- round-trip time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The round-trip time is the latency (delay between sending the packet and getting the response).&lt;/p&gt;

&lt;p&gt;By default, traceroute sends 3 packets per TTL increment. Each column [RTT1]&amp;hellip;[RTT3] corresponds to the time it took to get response (round-trip time). 3 different packets give a better sampling of the latency, it also helps for situation where multi-path exist (different link). For instance, the packet is routed to different link in hop 2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2  175.137.109.62 (175.137.109.62)  38.360 ms       [RTT1]
   175.137.109.70 (175.137.109.70)  38.219 ms       [RTT2]
   175.137.109.62 (175.137.109.62)  38.123 ms       [RTT3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another common scenario is timeout/packet dropped. For instance, 2 out of 3 traceroute packets were dropped/timeout in hop 4:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;4  10.55.32.88 (10.55.32.88)   113.878 ms * *
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;hping3&#34;&gt;Hping3&lt;/h1&gt;

&lt;p&gt;The &amp;apos;traceroute &amp;lt;target&amp;gt;&amp;apos; equivalent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# -V: verbose
# -1: icmp
# hping3 --traceroute -V -1 &amp;lt;target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;TCP/UDP mode:&lt;/strong&gt; hping3 traceroute on port 80, 443, 53, useful to identify where the packet is blocked:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# -S: set SYN flag
# -p: port
# hping3 --traceroute -S -p 443 &amp;lt;target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/hping3-traceroute-syn-port80-my.png&#34; alt=&#34;hping3-traceroute-syn-port-80-my&#34; /&gt;
&lt;img src=&#34;https://tzyluen.github.io/img/hping3-traceroute-syn-port443-my.png&#34; alt=&#34;hping3-traceroute-syn-port-443-my&#34; /&gt;
&lt;img src=&#34;https://tzyluen.github.io/img/hping3-traceroute-syn-port53-my.png&#34; alt=&#34;hping3-traceroute-syn-port-53-my&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;intrace&#34;&gt;InTrace&lt;/h1&gt;

&lt;p&gt;Traceroute-like enumerates IP hops by exploiting existing TCP connections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# intrace -i eth0 -h &amp;lt;target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Establish a TCP connection to port 80:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/intrace-ncat-usm-my-port80.png&#34; alt=&#34;intrace-ncat-usm-my-port80&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s capable to identified the target host is behind a NAT:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/intrace-usm-my.png&#34; alt=&#34;intrace-usm-my&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Traceroute to remotely initiated connections:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/intrace-netstat-tanp-local.png&#34; alt=&#34;intrace-netstat-tanp-local&#34; /&gt;
&lt;img src=&#34;https://tzyluen.github.io/img/intrace-remote-initiated-connection.png&#34; alt=&#34;intrace-remote-initiated-connection&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;nmap-traceroute-geolocation-script&#34;&gt;Nmap: traceroute-geolocation script&lt;/h1&gt;

&lt;p&gt;Pinpoint the nodes and traverse the network path with geo location. Nmap &lt;code&gt;traceroute-geolocation.nse&lt;/code&gt; supports geolocation, it lists the geographic locations of each hop and output the results to KML format plottable on Google Maps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# nmap --traceroute --script traceroute-geolocation.nse \
&amp;gt; --script-args &#39;traceroute-geolocation.kmlfile=&amp;lt;target&amp;gt;.kml&#39; &amp;lt;target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tzyluen.github.io/img/nmap-traceroute-nsysu.jpg&#34; alt=&#34;nmap-traceroute-nsysu&#34; /&gt;
&lt;img src=&#34;https://tzyluen.github.io/img/nmap-traceroute-nsysu-gmap.png&#34; alt=&#34;nmap-traceroute-nsysu-gmap&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>