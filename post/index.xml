<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Technical Notes</title>
    <link>https://tzyluen.github.io/post/</link>
    <description>Recent content in Posts on Technical Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015 - 2022. All rights reserved.</copyright>
    <lastBuildDate>Fri, 31 Mar 2017 00:00:00 +0800</lastBuildDate><atom:link href="https://tzyluen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scan a network for vulnerabilities with Nessus</title>
      <link>https://tzyluen.github.io/post/scan-a-network-for-vulnerabilities-with-nessus/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scan-a-network-for-vulnerabilities-with-nessus/</guid>
      <description>Table of Contents  Scan a network  Advanced Scans Basic Network Scans Launch A Scan   Results Exports  Executive Report Technical Report       Scan a network Target: 192.168.1.0/24 Nessus provides a set of ready-to-use templates. For general scans, the (1) Advanced Scan and (2) Basic Network Scan would work. The differences are the Advanced Scan supports the Compliance and Plugins which can be used to fine-tune the compliance checks (credentials are required) and plugins.</description>
    </item>
    
    <item>
      <title>Deep packet inspection</title>
      <link>https://tzyluen.github.io/post/deep-packet-inspection/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/deep-packet-inspection/</guid>
      <description>Table of Contents  Introduction nDPI  Build and install ndpi-netfilter   Realtime capture Iptables/netfilter  SSH Youtube Social Networks       Introduction Port-independent, P2P, and encrypted protocols and packets have made the conventional network traffics analysis that based on packet header (transport protocol and application ports) obsolete. Deep Packet Inspection (DPI) technology can be used to identify and classify these encrypted, port-independent, P2P protocols.</description>
    </item>
    
    <item>
      <title>Scan the Internet with Masscan</title>
      <link>https://tzyluen.github.io/post/scan-the-internet-with-masscan/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scan-the-internet-with-masscan/</guid>
      <description>Table of Contents  Scan large IP block Exclude IP blocks of sensitive part of the Internet Include IP blocks for targeted IP blocks Transmission Rates Specify ports and ranges Pull the services and banners Output formats Manage config for different scanning strategies     The base system used to perform the scans:
root@192.168.1.11:~# uname -a Linux kali 4.9.0-kali3-amd64 #1 SMP Debian 4.9.13-1kali2 (2017-03-07) x86_64 GNU/Linux Scan large IP block Scan the entire 175.</description>
    </item>
    
    <item>
      <title>Port-knocking</title>
      <link>https://tzyluen.github.io/post/port-knocking/</link>
      <pubDate>Sat, 03 Sep 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/port-knocking/</guid>
      <description>Table of Contents  Introduction Enabling knockd Port-knocking  Open the port Close the port   Using Hping3 / Nmap  Open the port Close the port   Alternatives     Introduction Port-knocking is a stealth method to open ports that the firewall keeps closed by default. A port-knock server listens to all traffic on an ethernet (or PPP) interface, looking for a special &amp;ldquo;knock&amp;rdquo; sequences of port-hits.</description>
    </item>
    
    <item>
      <title>Nmap top 1000 ports</title>
      <link>https://tzyluen.github.io/post/nmap-top-1000-ports/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/nmap-top-1000-ports/</guid>
      <description>In the  Nmap Network Scanning  book, chapter 15 , section  Port Specification and Scan Order , to quote &amp;ldquo;By default, Nmap scans the most common 1,000 ports for each protocol.&amp;rdquo; [1]
However, the documentation did not mention the list of 1000 ports.
So, how to identify and show those 1000 ports ?
--top-ports n: the n highest-ratio ports found in nmap-services. n must be 1 or greater -v: verbose level, to print the -oG: grepable output - : output to stdout $ nmap --top-ports 1000 -v -oG - localhost Note: refer to /usr/share/nmap/nmap-services file for the service name and protocol.</description>
    </item>
    
    <item>
      <title>Automate port scanning with Nmap &amp; Ndiff</title>
      <link>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/automate-port-scanning-with-nmap-ndiff/</guid>
      <description>Table of Contents  Nmap Ndiff  Scan and interpret the results/diffs   Automation     Nmap Ndiff Ndiff is a tool to aid in the comparison of Nmap scans. Ndiff, like the standard diff utility, compares two scans at a time. It takes two Nmap XML output files and prints the differences between them. The differences observed are:
 Host states (e.g. up to down) Port states (e.</description>
    </item>
    
    <item>
      <title>Scan the Internet with Nmap</title>
      <link>https://tzyluen.github.io/post/scan-the-internet-with-nmap/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scan-the-internet-with-nmap/</guid>
      <description>Table of Contents  Scan a Network/Subnet  Host Discovery Scan a large public network Scan a private network: 192.168.1.0/24   Scan a Single Target Remote OS and Service Detection  Host and Port State Reason   List of Examples     Scan a Network/Subnet Host Discovery HOST DISCOVERY: -sL: List Scan - simply list targets to scan, without sending any packets to the target hosts, useful to generate list of target hosts and dns resolution.</description>
    </item>
    
    <item>
      <title>SQL injection with sqlmap</title>
      <link>https://tzyluen.github.io/post/sql-injection-with-sqlmap/</link>
      <pubDate>Sat, 07 May 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/sql-injection-with-sqlmap/</guid>
      <description>Table of Contents  Scan for vulnerability  Create a HTTP request file Scan the target   Explore the vulnerable target&amp;rsquo;s databases and system  Dictionary attack against password hashes and dump full credentials OS Shell Access Behind the scene Speedup the process and specify custom injection payloads   Capture and decode the payload  with Ngrep with Wireshark Decode the payload       Scan for vulnerability Create a HTTP request file   Use -r option instead of passing long parameters of --url, --user-agent, etc.</description>
    </item>
    
    <item>
      <title>Wireshark: A quick troubleshoot on slow network (1)</title>
      <link>https://tzyluen.github.io/post/wireshark-a-quick-troubleshoot-on-slow-network-1/</link>
      <pubDate>Sat, 23 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/wireshark-a-quick-troubleshoot-on-slow-network-1/</guid>
      <description>Table of Contents  Quick drill into errors and connection issues Identify the protocols with high traffic Get the connection speed to a site Get the time spent in waiting for a response Identify the bad packets (TCP errors) ratio    Generate the statistic:- runs wireshark and starts capturing the network packets until the statistic builds.
 Quick drill into errors and connection issues   Navigates to &amp;#39;Analyze&amp;#39; â†’ &amp;#39;Expert Info&amp;#39; , a high number of errors and warnings indicates problems.</description>
    </item>
    
    <item>
      <title>Ngrep: quick peek at http traffic</title>
      <link>https://tzyluen.github.io/post/ngrep-quick-peek-at-http-traffic/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/ngrep-quick-peek-at-http-traffic/</guid>
      <description>Table of Contents  Quick peek Sorts out unique User-Agent (devices) Monitor the occurrence of the keywords Monitor HTTP GET | POST traffic by IP addresses DNS     Quick peek Monitor activities on device eth0 port 80:
-W byline: linefeeds (LF) are printed as linefeeds, more readable.
-qt: quiet mode and print human-readable timestamp.
# ngrep -d eth0 -W byline -qt port 80  Sorts out unique User-Agent (devices) In corporate environment, desktop/laptop OS build is often standardized.</description>
    </item>
    
    <item>
      <title>Extract files from captured network traffic pcap (2)</title>
      <link>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-2/</link>
      <pubDate>Sat, 09 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-2/</guid>
      <description>Table of Contents  Tcpxtract Tcpextract     Tcpxtract  Supports 26 file formats, extensible (/etc/tcpxtract.conf), however it requires the clear start and end markers. Supports only TCP packets, no UDP.    Live capture from an interface and extract:
$ mkdir -p /tmp/enp0s3-tcpxtract-output $ sudo tcpxtract -d enp0s3 -o /tmp/enp0s3-tcpxtract-output   Extract from the pcap file:
   Tcpextract   Similar to both tcpflow and tcpxtract, tcpextract extracts all files it recognized from a pcap file or interface.</description>
    </item>
    
    <item>
      <title>Extract files from captured network traffic pcap (1)</title>
      <link>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-1/</link>
      <pubDate>Sat, 02 Apr 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/extract-files-from-captured-network-traffic-pcap-1/</guid>
      <description>Table of Contents  Introduction Wireshark  HTTP objects and files Binary files   Tcpflow &amp;amp; Foremost     Introduction The process is mostly the same in network packets data-carving, which comprises of:
 Gain access and collect the raw bytes Strip the protocol information Extract and write the data to file  The differences of these tools are their capabilities i.e., the supported protocols and file formats.</description>
    </item>
    
    <item>
      <title>Wireshark: Changing the Default Column Display</title>
      <link>https://tzyluen.github.io/post/wireshark-changing-the-default-column-display/</link>
      <pubDate>Sat, 26 Mar 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/wireshark-changing-the-default-column-display/</guid>
      <description>Background The following setup is intended to streamline the column display for effective analysis when looking at HTTP and HTTPS traffic. The default columns are: &amp;lsquo;No (Packet number)&amp;rsquo;, &amp;lsquo;Time&amp;rsquo;, &amp;lsquo;Source&amp;rsquo;, &amp;lsquo;Destination&amp;rsquo;, &amp;lsquo;Protocol&amp;rsquo;, &amp;lsquo;Length&amp;rsquo;, and &amp;lsquo;Info&amp;rsquo;.
  Table of Contents  Background Changing the column display Changing the Time Display Format Adding HTTP Server Names Adding HTTPS Server Names     Changing the column display   To change the default column display, navigate to &amp;lsquo;Preferences&amp;rsquo;:</description>
    </item>
    
    <item>
      <title>Encrypting DNS Traffic</title>
      <link>https://tzyluen.github.io/post/encrypting-dns-traffic/</link>
      <pubDate>Sat, 19 Mar 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/encrypting-dns-traffic/</guid>
      <description>Table of Contents  DNSCrypt  Install Select a resolver Modify resolv.conf Start systemd service Verify the DNS traffic is encrypted       DNSCrypt can be used to increase web browsing privacy and thwart DNS traffic sniffing. It enables encryption and authentication on DNS traffic between the local computer and the remote DNS resolver. It helps to mask the domain resolution (sent in clear text) to the DNS server, before the HTTPS connection initiated to the target website.</description>
    </item>
    
    <item>
      <title>DNS resolution benchmark</title>
      <link>https://tzyluen.github.io/post/dns-resolution-benchmark/</link>
      <pubDate>Sat, 12 Mar 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/dns-resolution-benchmark/</guid>
      <description>Table of Contents  dig &amp;amp; grep namebench     dig &amp;amp; grep A straightforward way is by using the dig util from the dnsutils package and grep the results. This works well for quick debug on-the-go:
# apt-get install dnsutils $ dig @202.188.0.132 archive.org | grep &amp;quot;Query time:&amp;quot; ;; Query time: 356 msec $ dig @8.8.8.8 archive.org | grep &amp;quot;Query time:&amp;quot; ;; Query time: 48 msec Note: 202.</description>
    </item>
    
    <item>
      <title>Killing TCP connections</title>
      <link>https://tzyluen.github.io/post/killing-tcp-connections/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/killing-tcp-connections/</guid>
      <description>Table of Contents  Tcpkill GDB     Tcpkill enables priviledged user to kill TCP connections, it uses the tcpdump expression. It&amp;rsquo;s part of the dsniff package. The default degree of brute force to use in killing a connection is 3, fast connections may require a higher number in order to land a RST in the moving receive window.
tcpkill [-i interface] [-1...9] expression For example, to kill the established and also to prevent any connections from 192.</description>
    </item>
    
    <item>
      <title>Tracing Malicious Network Traffic</title>
      <link>https://tzyluen.github.io/post/tracing-malicious-network-traffic/</link>
      <pubDate>Sat, 27 Feb 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/tracing-malicious-network-traffic/</guid>
      <description>Table of Contents  Nettop  Google Transparency Report: Safe Browsing Tool   Netstat Flowtop    Nettop Assuming an unknown/suspicious output (i.e., no chat client is being used, but random chat domain appeared: vmp.boldchat.com) is spotted from a DNS monitoring such as in previous post titled - Sniff DNS queries:
Under macOS, the nettop util provides list of sockets and routes in details that help to trace down the process that established the connection to the unknown domain:</description>
    </item>
    
    <item>
      <title>Sniff DNS Queries</title>
      <link>https://tzyluen.github.io/post/sniff-dns-queries/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/sniff-dns-queries/</guid>
      <description>Table of Contents  Dnstop Tcpdump Wireshark / Tshark     Dnstop is a console libpcap application that displays various tables of DNS traffic on a network including:
 Source IP addresses Destination IP addresses Query types Top level domains Second level domains  # dnstop enp0s3 -l 3  Use ctrl-r to reset the counter/refresh the history to get the latest queries.
  Tcpdump Capture packets from port 53 (DNS):</description>
    </item>
    
    <item>
      <title>Capture Network Traffic on WLAN (macOS)</title>
      <link>https://tzyluen.github.io/post/capture-network-traffic-on-wlan-macos/</link>
      <pubDate>Sat, 13 Feb 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/capture-network-traffic-on-wlan-macos/</guid>
      <description>Table of Contents  MacOS&amp;rsquo;s Airport Wireshark    MacOS&amp;rsquo;s Airport is a built-in wireless utility comes preinstalled in MacOS.
$ ll /usr/local/bin/airport lrwxr-xr-x 1 root wheel 89 Jun 22 2016 /usr/local/bin/airport@ -&amp;gt; /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport Perform a wireless broadcast scan to get the list of access points in the neighborhood:
Sniff 802.11 frames on channel 1, the output is in pcap format and can be opened with tcpdump/wireshark:
$ airport en0 sniff 1 Capturing 802.</description>
    </item>
    
    <item>
      <title>Dynamic Traceroute</title>
      <link>https://tzyluen.github.io/post/dynamic-traceroute/</link>
      <pubDate>Sat, 06 Feb 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/dynamic-traceroute/</guid>
      <description>mtr Often times, troublesome networks won&amp;rsquo;t show up in the results of a few packets. mtr combines the functionality of the traceroute and ping utils and enables user to constantly poll a remote server to see the latency and performance changes over time. It&amp;rsquo;s not installed by default on most linux systems, simply get it from the distribution and package manager of choice:
$ sudo apt-get install mtr To debug remotely over ssh where no GUI is available, use the --curses or -t option:</description>
    </item>
    
    <item>
      <title>Reading Traceroute</title>
      <link>https://tzyluen.github.io/post/reading-traceroute/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/reading-traceroute/</guid>
      <description>This post extends the discussion on traceroute in previous post Traceroute, Firewalls &amp;amp; Geo-IP, and focused on intepreting the traceroute report.
Output format explanation:  v--- the router/ip-addr traversed by the packet [Hop] [Hostname/(IP-addr)] [RTT1] [RTT2] [RTT3] ^--- transit no. of the route ^---- round-trip time The round-trip time (RTT) is the latency (delay between sending the packet and getting the response).
By default, traceroute sends 3 packets per TTL increment.</description>
    </item>
    
    <item>
      <title>Traceroute, Firewalls &amp; Geo-IP</title>
      <link>https://tzyluen.github.io/post/traceroute-firewalls-geoip/</link>
      <pubDate>Sun, 24 Jan 2016 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/traceroute-firewalls-geoip/</guid>
      <description>Table of Contents  Traceroute  ICMP mode UDP mode TCP mode Output format explanation   Hping3 InTrace Nmap: traceroute-geolocation script    Traceroute Traceroute is useful for diagnosing networking problems, e.g., end-to-end connectivty, complement with ping. It can also be used to pinpoint the location of devices, routers and firewalls. The tracerouting tools fundamentally rely on the IP packet&amp;rsquo;s field - TTL (Time-To-Live, decremented at each hop, dies at 0), they send short-life IP packets and wait for Time Exceeded ICMP packets reporting the death of these packets from a router, consequently reveal the route.</description>
    </item>
    
    <item>
      <title>Tools for Scanning Malicious URLs and Websites</title>
      <link>https://tzyluen.github.io/post/tools-for-scanning-malicious-urls-and-websites/</link>
      <pubDate>Sun, 06 Dec 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/tools-for-scanning-malicious-urls-and-websites/</guid>
      <description>Table of Contents  List of online and web-based tools Text-mode based Utility  VirusTotalApi       List of online and web-based tools  https://www.virustotal.com: by VirusTotal, a subsidiary of Google https://exchange.xforce.ibmcloud.com: by IBM http://safeweb.norton.com: by Norton, Symantec http://www.avgthreatlabs.com/ww-en/website-safety-reports: by AVG ThreatLabs https://cymon.io: by https://eSentire.com http://www.reputationauthority.org: by WatchGuard Technologies http://isitphishing.org: by https://vadesecure.com   Text-mode based Utility VirusTotalApi $ git clone https://github.com/doomedraven/VirusTotalApi.git It is an utility to search on VirusTotal databases [1] for malicious URLs and hashes of known malware.</description>
    </item>
    
    <item>
      <title>Privacy: remove metadata from images</title>
      <link>https://tzyluen.github.io/post/privacy-remove-metadata-from-images/</link>
      <pubDate>Sat, 28 Nov 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/privacy-remove-metadata-from-images/</guid>
      <description>Digital cameras (including smartphones) and computers (screenshots) embed technical metadata into image files. It serves great purpose to record image profiles but it could exposed some private information i.e., device profiles, GPS coordinates, etc and thus caused privacy issues.
Before share images online, strip clean the image EXIF (Exchangeable Image File) metadata. The libimage-exiftool-perl package contains the library and program to read and write meta information in multimedia files.
$ sudo apt-get install libimage-exiftool-perl To view the exif metadata:</description>
    </item>
    
    <item>
      <title>Hping3: Use Cases</title>
      <link>https://tzyluen.github.io/post/hping3-use-cases/</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/hping3-use-cases/</guid>
      <description>Table of Contents  hping3 and the firewall  ICMP mode TCP mode UDP mode SCAN mode      hping3 and the firewall Mode default mode TCP -0 --rawip RAW IP mode -1 --icmp ICMP mode -2 --udp UDP mode -8 --scan SCAN mode. Example: hping --scan 1-30,70-90 -S www.target.host -9 --listen listen mode ICMP mode The typical ping utility and the hping3 equivalent, sending ICMP-echo and receiving ICMP-reply:</description>
    </item>
    
    <item>
      <title>Firewall: Iptables and UFW Enablement</title>
      <link>https://tzyluen.github.io/post/firewall-iptables-ufw-enablement/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/firewall-iptables-ufw-enablement/</guid>
      <description>Table of Contents  Iptables UFW  Manage ufw by predefined service names Extended syntax Reorders firewall rules      Iptables List the configured rules:
# iptables -L # iptables -L -t nat iptables contains 5 tables, (-t, --tables): raw, filter, nat, mangle and security. In common use cases, filter and nat is used, where filter is associated with the firewall and nat is used for network address translation such as port forwarding.</description>
    </item>
    
    <item>
      <title>Scanning Malicious URLs</title>
      <link>https://tzyluen.github.io/post/scanning-malicious-urls-phantomjs-google-safe-browsing-api/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
      
      <guid>https://tzyluen.github.io/post/scanning-malicious-urls-phantomjs-google-safe-browsing-api/</guid>
      <description>My examples are in JS, on PhantomJS headless browser, it could be easily adapted to other languages. The script traverses a webpage and harvests all the URLs therein to check for malware/malicious sites through the Google Safe Browsing API.
192.168.1.9:~$ phantomjs chk-malinks.js http://some.malware.site 1: hshd.io 2: sourceforge.net 3: popup.taboola.com 4: www.geeksvip.com 5: my.hear.com ... 159: nba1001.net 160: www.pressroomvip.com 161: tracking.lifestylejournal.com 162: dsct2.com 163: www.historynut.com 164: www.buro247.my gsafe response json:{ &amp;quot;matches&amp;quot;: [ { &amp;quot;threatType&amp;quot;: &amp;quot;MALWARE&amp;quot;, &amp;quot;platformType&amp;quot;: &amp;quot;ANY_PLATFORM&amp;quot;, &amp;quot;threat&amp;quot;: { &amp;quot;url&amp;quot;: &amp;quot;nba1001.</description>
    </item>
    
  </channel>
</rss>
